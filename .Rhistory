print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
if(!any(is.na(conductance)) && all(conductance > 0.8)){
#cond_na_omit = as.numeric(na.omit(conductance))
#if(length(cond_na_omit) > 0 && all(cond_na_omit > 0.8)){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
dim(S$sm$none)
S$sm$none[1:5,1:5]
info
info = info[-1,]
head(info)
allInfo$`BRD-K18812295_10uM`
dim(allInfo$`BRD-K18812295_10uM`)
info
head(info)
plot(info$outcome_dmso, info$outcome_c18)
cor(info$outcome_dmso, info$outcome_c18)
abline(0,1)
NA > 0.8
!is.na(NA) && NA > 0.8
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
mean_response = mean(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(!is.na(mean_response) && mean_response > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean_response))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
info
plot(info$outcome_dmso, info$outcome_c18)
abline(0, 1)
# Identify relevant experiments (measured drug/dose combinations with conductance not too low)
C = drugData$outcomes
dose_cols = list(c('1uM_mean.dmso', '1uM_mean.c18'),
c('3uM_mean.dmso', '3uM_mean.c18'),
c('10uM_mean.dmso', '10uM_mean.c18'))
dose_ranges = list(c(0.7,1.3), c(2.1, 3.9), c(7,13))
doses = c('1uM', '3uM', '10uM')
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(!is.na(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
info
minR
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
warnings()
info
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
rownames(S$sm)
rownames(S$sm$none)
dim(info)
rownames(info) = rownames(S$sm$none)
info
# Identify relevant experiments (measured drug/dose combinations with conductance not too low)
C = drugData$outcomes
dose_cols = list(c('1uM_mean.dmso', '1uM_mean.c18'),
c('3uM_mean.dmso', '3uM_mean.c18'),
c('10uM_mean.dmso', '10uM_mean.c18'))
dose_ranges = list(c(0.7,1.3), c(2.1, 3.9), c(7,13))
doses = c('1uM', '3uM', '10uM')
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, dose=NA, outcome_dmso=NA, outcome_c18=NA, mean=NA, max=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert_id=pert, dose=doses[j],
outcome_dmso=conductance[1], outcome_c18=conductance[2],
mean=mean(conductance, na.rm=TRUE), max=max(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
# Some post-processing
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
info = info[-1,]
rownames(info) = rownames(S$sm$none)
?ifelse
# Binarize outcomes in info:
info$result = 'inconclusive'
info$result[info$max >= 1.25] = 'active'
info$result[info$max < 1.2] = 'inactive'
info
varPart = fitExtractVarPartModel(S$sm$none, ~outcome_dmso , info)
dim(S$sm$none)
dim(info)
fitExtractVarPartModel
?fitExtractVarPartModel
S$sm$none
dim(S$sm$none)
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
dim(t(S$sm$none))
head(info)
info$outcome_dmso
lapply(info, class)
meanSigs = list()
allInfo = list()
fill = -999
info = data.frame(pert_id=NA, dose=NA, outcome_dmso=fill, outcome_c18=fill, mean=fill, max=fill)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert_id=pert, dose=doses[j],
outcome_dmso=conductance[1], outcome_c18=conductance[2],
mean=mean(conductance, na.rm=TRUE), max=max(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
# Some post-processing
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
info = info[-1,]
rownames(info) = rownames(S$sm$none)
# Binarize outcomes in info:
info$result = 'inconclusive'
info$result[info$max >= 1.25] = 'active'
info$result[info$max < 1.2] = 'inactive'
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
info$outcome_dmso
info$max
class(info)
info$max >= 1.25
lapply(info, class)
tmp = info
cols = c('outcome_dmso', 'outcome_c18', 'mean', 'max', 'result')
info[,cols] = lapply(info[,cols], as.numeric)
info
info = tmp
tmp
info
cols = c('outcome_dmso', 'outcome_c18', 'mean', 'max')
info[,cols] = lapply(info[,cols], as.numeric)
info
info$outcome_dmso
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
vp = sortCols(varPart)
vp
varPart
vp = varPart
vp[order(vp$outcome_dmso),]
vp[order(vp$outcome_dmso, decreasing=TRUE),]
vp[order(vp$outcome_dmso, decreasing=TRUE)[1:30],]
vp = sortCols(varPart)
plotPercentBars(vp[order(vp$outcome_dmso,decreasing=TRUE)[1:30],])
plotVarPart(vp)
plotVarPart(vp[,1])
vp[,1]
hist(varPart$outcome_dmso)
head(info)
v_dmso = varPart
v_c18 = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info)
hist(v_c18)
hist(v_c18$outcome_c18)
cor(v_c18$outcome_c18, v_dmso$outcome_dmso)
plot(v_c18$outcome_c18, v_dmso$outcome_dmso)
v_mean = fitExtractVarPartModel(t(S$sm$none), ~mean, info)
v_max = fitExtractVarPartModel(t(S$sm$none), ~max, info)
info_sub = subset(info, result %in% c('active', 'inactive'))
info_sub
A = S$sm$none[rownames(info_sub),]
dim(A)
dim(S$sm$none)
v_bin = fitExtractVarPartModel(t(A), ~result, info_sub)
V = data.frame(dmso=v_dmso$outcome_dmso, c18=v_c18$outcome_c18,
mean=v_mean$mean, max=v_max$max, binary=v_bin$result)
plotVarPart(V)
?sample
sample(nrow(info))
sample(nrow(info), replace=FALSE)
set.seed(123)
set.seed(123)
v_rand = list()
for(i in 1){
info_shuf = info[sample(nrow(info)),]
v_rand[[i]] = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info_shuf)
}
hist(v_rand[[i]]$outcome_c18)
V$rand1 = v_rand[[1]]$outcome_c18
plotVarPart(V)
cor(V$dmso, V$rand1)
cor(V$dmso, V$c18)
for(i in 2){
info_shuf = info[sample(nrow(info)),]
v_rand[[i]] = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info_shuf)
}
V[[paste0('rand', str(i))]] = v_rand[[i]]$outcome_c18
plotVarPart(V)
cor(V$rand1, V$rand)
cor(V$binary, V$dmso)
paste0('rand', str(i))
paste0('rand', i)
names(V)
save(V, OutputDir('active_v_inactive/variance_partition_take1.RData'))
save(V, file=OutputDir('active_v_inactive/variance_partition_take1.RData'))
minCutoff = .5
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
plotVarPart(V, main='Percent of explained variance per gene, no batch correction')
plotVarPart(V, main=sprintf('No batch correction, min cutoff = %0.2f', 0.8))
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
dir = OutputDir('active_v_inactive')
minCutoff = .5
source('~/Box Sync/CFDR/cfdr/code/R/scripts/compare_sigs/get_relevant_L1000_sigs_for_CF_active_inactive_analysis.R')
A = data.frame(x=0)
A$y = rep(1, 10)
A
dim(S$sm)
dim(S$sm$none)
?gage
library(gage)
?gage
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/LDA_tissue_specific_side_effects.R')
testAll = FALSE
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/LDA_tissue_specific_side_effects.R')
rm(list=ls())
setwd('/Users/rhodos/Desktop/Research/LINCS/submission/dgc_predict')
testAll = FALSE
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/LDA_tissue_specific_side_effects.R')
feat
out = list()
for(s in 1:ncol(SE)){
se = colnames(SE)[s]
for(f in 1:length(X)){
feat = names(X)[f]
print(sprintf('Computing CD for %s feature type...', feat))
# Construct data matrix
x = X[[f]][rownames(SE),]
x = x - apply(x, 2, mean, na.rm=TRUE) # center data
x = x[!is.na(x[,1]),] # remove missing signatures in the case of only measured data
data = data.frame(genenames=colnames(x), t(x))
colnames(data) = gsub(colnames(data), pattern='[.]', replacement='-')
# Identify side effect labels
labels = as.factor(SE[colnames(data[,-1]),s] + 1)
nPos = length(which(labels==2))
nTot = length(labels)
# # Run characteristic direction
# w = chdirAnalysis(data, labels, CalculateSig=FALSE)$chdirprops$chdir[[1]]
#
# # Project data onto characteristic direction vector
# proj_x = t(w) %*% t(x)
#
# # Plot
# #if(grepl('meas', feat)){browser()}
# y = ifelse(labels==1, 1, 1.05)
# plot(x=proj_x, y=y, col=ifelse(labels==1, 'blue', 'red'), pch=8, ylim=c(0,2),
#      main=sprintf('%s (%d/%d), using %s input', se, nPos, nTot, feat))
# Run LDA
out[[se]][[feat]] = lda(x=x,grouping=labels, CV=TRUE)
}
}
warnings()
out$Rash.maculo.papular$mean_obs
head9out$Rash.maculo.papular$mean_obs)
head(out$Rash.maculo.papular$mean_obs)
names(out$Rash.maculo.papular$mean_obs)
head(out$Rash.maculo.papular$mean_obs$class)
head(out$Rash.maculo.papular$mean_obs$posterior)
head(out$Rash.maculo.papular$mean_obs$call)
out$Rash.maculo.papular$mean_obs$posterior
na.omit(out$Rash.maculo.papular$mean_obs$posterior)
?lda
dim(x)
labels
x1 = x[labels==1,]
x2 = x[labels==2,]
dim(x1)
dim(s2)
dim(x2)
cov(x1)
cov(t(x1))
rank(cov(t(x1)))
?svd
SVD = svd(t(x1))
SVD$u
dim(SVD$u)
SVD$d
plot(SVD$d)
SVD = svd(t(x2))
plot(SVD$d)
SVD$d
names(X)
feat
grepl('full', feat)
labels
?sample
idxSample = sample.int(nTot_prev, replace=FALSE)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/LDA_tissue_specific_side_effects.R')
idxSample
length(idxSample)
length(unmeas_samples)
meas_prev
out = list()
nPos_prev = 1
nTot_prev = 1
for(s in 1:ncol(SE)){
se = colnames(SE)[s]
print(sprintf('SIDE EFFECT = %s', toupper(se)))
for(f in 1:length(X)){
feat = names(X)[f]
print(sprintf('Running LDA for %s feature type...', feat))
if(grepl('full', feat)){
meas_prev = rownames(x)
}
# Construct data matrix
x = X[[f]][rownames(SE),]
x = x - apply(x, 2, mean, na.rm=TRUE) # center data
x = x[!is.na(x[,1]),] # remove missing signatures in the case of only measured data
data = data.frame(genenames=colnames(x), t(x))
colnames(data) = gsub(colnames(data), pattern='[.]', replacement='-')
# Identify side effect labels
labels = as.factor(SE[colnames(data[,-1]),s] + 1)
nPos_prev = nPos
nTot_prev = nTot
nPos = length(which(labels==2))
nTot = length(labels)
# The question is, whether the small sample number would lead to zero variance regardless of the samples.
if(grepl('full', feat)){
unmeas_samples = setdiff(colnames(x), meas_prev)
unmeas_labels = as.factor(SE[unmeas_samples,s]+1)
idxSample = sample.int(nTot_prev, replace=FALSE)
x = unmeas_samples[idxSample,]
labels = unmeas_labels[idxSample]
data = data.frame(genenames=colnames(x), t(x))
colnames(data) = gsub(colnames(data), pattern='[.]', replacement='-')
}
# Run characteristic direction
w = chdirAnalysis(data, labels, CalculateSig=FALSE)$chdirprops$chdir[[1]]
# Project data onto characteristic direction vector
proj_x = t(w) %*% t(x)
# Plot
#if(grepl('meas', feat)){browser()}
y = ifelse(labels==1, 1, 1.05)
plot(x=proj_x, y=y, col=ifelse(labels==1, 'blue', 'red'), pch=8, ylim=c(0,2),
main=sprintf('%s (%d/%d), using %s input', se, nPos, nTot, feat))
# Run LDA
#out[[se]][[feat]] = lda(x=x,grouping=labels, CV=TRUE)
}
}
idxSample
unmeas_samples
out = list()
nPos_prev = 1
nTot_prev = 1
for(s in 1:ncol(SE)){
se = colnames(SE)[s]
print(sprintf('SIDE EFFECT = %s', toupper(se)))
for(f in 1:length(X)){
feat = names(X)[f]
print(sprintf('Running LDA for %s feature type...', feat))
if(grepl('full', feat)){
meas_prev = rownames(x)
}
# Construct data matrix
x = X[[f]][rownames(SE),]
x = x - apply(x, 2, mean, na.rm=TRUE) # center data
x = x[!is.na(x[,1]),] # remove missing signatures in the case of only measured data
data = data.frame(genenames=colnames(x), t(x))
colnames(data) = gsub(colnames(data), pattern='[.]', replacement='-')
# Identify side effect labels
labels = as.factor(SE[colnames(data[,-1]),s] + 1)
nPos_prev = nPos
nTot_prev = nTot
nPos = length(which(labels==2))
nTot = length(labels)
# The question is, whether the small sample number would lead to zero variance regardless of the samples.
if(grepl('full', feat)){
unmeas_samples = setdiff(rownames(x), meas_prev)
unmeas_labels = as.factor(SE[unmeas_samples,s]+1)
idxSample = sample.int(nTot_prev, replace=FALSE)
x = unmeas_samples[idxSample,]
labels = unmeas_labels[idxSample]
data = data.frame(genenames=colnames(x), t(x))
colnames(data) = gsub(colnames(data), pattern='[.]', replacement='-')
}
# Run characteristic direction
w = chdirAnalysis(data, labels, CalculateSig=FALSE)$chdirprops$chdir[[1]]
# Project data onto characteristic direction vector
proj_x = t(w) %*% t(x)
# Plot
#if(grepl('meas', feat)){browser()}
y = ifelse(labels==1, 1, 1.05)
plot(x=proj_x, y=y, col=ifelse(labels==1, 'blue', 'red'), pch=8, ylim=c(0,2),
main=sprintf('%s (%d/%d), using %s input', se, nPos, nTot, feat))
# Run LDA
#out[[se]][[feat]] = lda(x=x,grouping=labels, CV=TRUE)
}
}
unmeas_samples
rownames(x)
meas_prev
