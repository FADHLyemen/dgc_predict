}
hist(v_rand[[i]]$outcome_c18)
V$rand1 = v_rand[[1]]$outcome_c18
plotVarPart(V)
cor(V$dmso, V$rand1)
cor(V$dmso, V$c18)
for(i in 2){
info_shuf = info[sample(nrow(info)),]
v_rand[[i]] = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info_shuf)
}
V[[paste0('rand', str(i))]] = v_rand[[i]]$outcome_c18
plotVarPart(V)
cor(V$rand1, V$rand)
cor(V$binary, V$dmso)
paste0('rand', str(i))
paste0('rand', i)
names(V)
save(V, OutputDir('active_v_inactive/variance_partition_take1.RData'))
save(V, file=OutputDir('active_v_inactive/variance_partition_take1.RData'))
minCutoff = .5
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
plotVarPart(V, main='Percent of explained variance per gene, no batch correction')
plotVarPart(V, main=sprintf('No batch correction, min cutoff = %0.2f', 0.8))
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
dir = OutputDir('active_v_inactive')
minCutoff = .5
source('~/Box Sync/CFDR/cfdr/code/R/scripts/compare_sigs/get_relevant_L1000_sigs_for_CF_active_inactive_analysis.R')
A = data.frame(x=0)
A$y = rep(1, 10)
A
dim(S$sm)
dim(S$sm$none)
?gage
library(gage)
?gage
setwd('~/Desktop/Research/LINCS/submission/dgc_predict')
testAll = TRUE
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir()
TestMakeDir = function(){
MakeDir('foo')
unlink('foo', recursive=TRUE)
}
TestMakeDir()
?dir.create
?dir.exists
dir.create('')
dir.create('foo/bar', recursive=TRUE)
dir.exists('foo/bar')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/src/Utils.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir(0)
TestMakeDir()
unlink('foo/bar', recursive=TRUE)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir()
TestMakeDir()
getwd()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir()
?unlink
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestMakeDir()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
source('R/init.R')
load(DataDir('metadata/hgnc_to_entrez.RData'))
names(map)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/src/DataProc.R')
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_DataProc.R')
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/init.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_all.R')
warnings()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_DataProc.R')
rm(list=ls())
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/init.R')
warnings()
LsVars()
tensors = LoadTensors(tsize='small', print=FALSE, loadMergeAndPred = FALSE)
names(tensors)
GCP = ComputeGCP(tensors$meas, tensors$cv[1], plot=FALSE, subset='cv', file=NA)
GCP = ComputeGCP(tensors$meas[,,1], tensors$cv[1][,,1], plot=FALSE, subset='cv', file=NA)
GCP = ComputeGCP(tensors$meas[,,10:11], tensors$cv[1][,,10:11], plot=FALSE, subset='cv', file=NA)
length(tensors$cv[1])
dim(tensors$cv[1])
dim(unlist(tensors$cv[1]))
dim(tensors$cv[[1]])
GCP = ComputeGCP(tensors$meas[,,14:15], tensors$cv[1][[1]][,,14:15], plot=FALSE, subset='cv', file=NA)
GCP = ComputeGCP(tensors$meas[,,1:2], tensors$cv[1][[1]][,,1:2], plot=FALSE, subset='cv', file=NA)
A = tensors$cv[[1]][,,1:2]
dim(A)
A
A[,,1]
dim(A[,,1])
dim(A[,,2])
cov(A[,,2])
cov(A[,,2], use='pairwise')
dim(cov(A[,,2], use='pairwise'))
C = cov(A[,,2], use='pairwise')
any(is.na(C))
GCP = ComputeGCP(tensors$meas[,,1:2], tensors$cv[1][[1]][,,1:2], plot=FALSE, subset='cv', file=NA)
A = tensors$cv[1][[1]][,,1:2]
dim(A)
class(A)
GCP
T1 = array(data=rnorm(2000), dim=c(10,100,2))
T2 = list(test_tensor = array(data=rnorm(2000), dim=c(10,100,2)))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
T2
names(T2)
dim(T2$test_tensor)
T1 = array(data=rnorm(2000), dim=c(100,10,2))
T2 = list(test_tensor = array(data=rnorm(2000), dim=c(100,10,2)))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
T_meas = T1
T_pred_list = T2
G_meas = ComputeGeneGeneCor(T_meas, cellSpecific=TRUE)
nGene
cell
cellIds
nm = list(drugs=NULL, genes=NULL, cells=c('A','B'))
T1 = array(data=rnorm(2000), dim=c(100,10,2), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(2000), dim=c(100,10,2)), nm)
T1
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
T1[,1:nGene,cell]
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
G_meas
nm = list(drugs=NULL, genes=NULL, cells=c('A','B'))
T1 = array(data=rnorm(2000), dim=c(100,10,2), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(2000), dim=c(100,10,2)), nm)
T1
dim(T1)
dimnames(T1)
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
cell
cellIds
cellIds = dimnames(tensor)[[3]]
letters
interaction(letters, LETTERS)
as.character(interaction(letters, LETTERS))[1:100]
interaction(letters, LETTERS))
interaction(letters, LETTERS)
levels(interaction(letters, LETTERS))
as.character(levels(interaction(letters, LETTERS)))
as.character(levels(interaction(letters, LETTERS)))[1:100]
n = 700
stopifnot(n <= 26^2)
n = 600
stopifnot(n <= 26^2)
AlphaNames = function(n){
stopifnot(n <= 26^2)
return(as.character(levels(interaction(letters, LETTERS)))[1:n])
}
nm = AlphaNames(5)
nm
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
nDrugs = 100
nGenes = 10
nCells = 2
nEntries = nDrugs * nGenes * nCells
nm = list(drugs=AlphaNames(nDrugs), genes=AlphaNames(nGenes), cells=AlphaNames(nCells))
T1 = array(data=rnorm(nEntres), dim=c(nDrugs,nGenes,nCells), dimnames=nm)
T1 = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
GCP
nDrugs = 1000
nGenes = 10
nCells = 2
nEntries = nDrugs * nGenes * nCells
nm = list(drugs=AlphaNames(nDrugs), genes=AlphaNames(nGenes), cells=AlphaNames(nCells))
nDrugs = 500
nGenes = 10
nCells = 2
nEntries = nDrugs * nGenes * nCells
nm = list(drugs=AlphaNames(nDrugs), genes=AlphaNames(nGenes), cells=AlphaNames(nCells))
T1 = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
GCP
G1 = ComputeGeneGeneCor(T1, cellSpecific=TRUE)
G1
nm = list(drugs=paste0('drug.', AlphaNames(nDrugs)),
genes=paste0('gene.', AlphaNames(nGenes)),
cells=paste0('cell.', AlphaNames(nCells)))
T1 = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
GCP
set.seed(123)
nDrugs = 500
nGenes = 10
nCells = 2
nEntries = nDrugs * nGenes * nCells
nm = list(drugs=paste0('drug.', AlphaNames(nDrugs)),
genes=paste0('gene.', AlphaNames(nGenes)),
cells=paste0('cell.', AlphaNames(nCells)))
T1 = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm)
T2 = list(test_tensor = array(data=rnorm(nEntries), dim=c(nDrugs,nGenes,nCells), dimnames=nm))
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA)
GCP
stopifnot(all(abs(GCP) < 0.2))
abs(GCP)
GCP$test_tensor
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP
TestComputeGCP()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/src/EvaluateTensor.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
randG = rnorm(nGenes, sd=5)
randG
for(g in 1:nGenes){
T1[,g,] = randG
T2[[1]][,g,] = randG
}
T1
T1[1:5,1:5,1]
for(g in 1:nGenes){
T1[,g,] = randG[g]
T2[[1]][,g,] = randG[g]
}
T1[1:5,1:5,1]
T1[1:5,1:5,2]
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA, print=FALSE)
GCP
T1[,g,]
dim(T1[,g,])
rnorm(dim(T1[,g,]))
?rnorm
prod(dim(T1[,g,]))
rnorm(n=prod(dim(T1[,g,])), mean=0, sd=0.1)
randG = rnorm(nGenes, sd=5)
for(g in 1:nGenes){
T1[,g,] = randG[g] + rnorm(n=prod(dim(T1[,g,])), mean=0, sd=0.1)
T2[[1]][,g,] = -randG[g] + rnorm(n=prod(dim(T1[,g,])), mean=0, sd=0.1)
}
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA, print=FALSE)
GCP
T1[1:5,1:5,2]
ComputeGeneGeneCor(T1)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
list[x1, x2] = Tensor2Vec(T1, T2)
x1
as.vector(R1)
as.vector(T1)
length(as.vector(T1)
)
nEntries
?rand
?sample
a = sample(T1, size=10)
a
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
list[T1, T2] = MakeTwoRandomTensors()
dim(T1)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
list[T1, T2] = MakeTwoRandomTensors()
dim(T1)
dim(T2)
T2$test_tensor = T2
T2[[1]]
T2 = list()
list[T1, T2$test_tensor] = MakeTwoRandomTensors()
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA, print=FALSE)
stopifnot(all(abs(GCP$test_tensor) < 0.2))
list[T1, T2] = MakeTwoRandomTensors()
list[x1, x2] = Tensor2Vec(T1, T2)
length(x1)
a = sample(T1, size=nEntries/10)
T1[T1 %in% a] = NA
b = sample(T2, size=nEntries/10)
T2[T2 %in% b] = NA
length(which(is.na(T1)))
vec = Tensor2Vec(T1, T2)
nEntries*0.81
length(x1)
x1
any(is.na(x1))
any(is.na(T1))
length(which((is.na(T1)))
)
length(which((is.na(T2))))
list[x1,x2] = Tensor2Vec(T1, T2)
length(x1)
nEntries / 100
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestTensor2Vec
TestTensor2Vec()
a = rnorm(100)
b = a
cor(a,b)
T2 = list()
list[T1, T2$test_tensor] = MakeTwoRandomTensors()
ComputePCT(T1, T2)
list[T1, T2] = MakeTwoRandomTensors()
ComputePCT(T1, T2)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestTensor2Vec()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
GCP
GCP$test_tensor
abs(GCP$test_tensor)
all(abs(GCP$test_tensor) < 0.2)
T1 = MakeRandomTensor()
T2 = list(test_tensor = MakeRandomTensor())
GCP = ComputeGCP(T1, T2, plot=FALSE, subset='cv', file=NA, print=FALSE)
GCP
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputeGCP()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputePCT()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputePCT()
length(x1)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputePCT()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
dim(T1)
dim(T1)[1]
list[nDrug, nGene, nCell] = dim(T1)
nDrug
set.seed(123)
T1 = MakeRandomTensor()
list[nDrug, nGene, nCell] = dim(T1)
T2 = T1
for(d in 1:nDrug){
T2[d,,] = T2[d,,] + rnorm(n=nGene*nCell, mean=0, sd=d*(1/nDrug))
}
out = ComputePCT_AllModes(T1, list(tmp = T2))
out
out$PCTd
plot(out$PCTd)
out$PCTd
out$PCTd$tmp
plot(out$PCTd$tmp)
length(out$PCTd$tmp)
out$PCTC$tmp
out$PCTc$tmp
out$PCTg$tmp
length(which(is.na(T1)))
out$PCTd$tmp[1:(nDrug/2)]
mean(out$PCTd$tmp[1:(nDrug/2)])
out$PCTd$tmp[1:10]
mean(out$PCTd$tmp[1:10])
mean(out$PCTd$tmp[-(1:10)])
out$PTCd$tmp
out$PCTd$tmp
out$PCTd$tmp[nDrug]
?smooth
plot(smooth(out$PCTd$tmp))
plot(smooth(out$PCTd$tmp, twiceit = TRUE))
?smooth
plot(smooth.spline(out$PCTd$tmp, twiceit = TRUE))
plot(smooth.spline(out$PCTd$tmp))
smooth.spline(out$PCTd$tmp)
lm.fit(out$PCTd$tmp)
lm.fit(1:nDrug, out$PCTd$tmp)
a = smooth.spline(out$PCTd$tmp)
a
a$x
a$yin
a$y
?order
?is.unsorted
a = smooth.spline(out$PCTd$tmp)
a
spar
a$spar
a$fit
?lm.fit
D = smooth.spline(out$PCTd$tmp)
stopifnot(identical(sort(D, decreasing=TRUE), D))
D
D$y
y = smooth.spline(out$PCTd$tmp)$y
stopifnot(identical(sort(y, decreasing=TRUE), y))
set.seed(123)
T1 = MakeRandomTensor(nCells=10)
list[nDrug, nGene, nCell] = dim(T1)
T2 = T1
for(d in 1:nDrug){
T2[d,,] = T2[d,,] + rnorm(n=nGene*nCell, mean=0, sd=d*(1/nDrug))
}
out = ComputePCT_AllModes(T1, list(tmp = T2))
y = smooth.spline(out$PCTd$tmp)$y
stopifnot(identical(sort(y, decreasing=TRUE), y))
y
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputePCT_AllModes()
set.seed(123)
T1 = MakeRandomTensor()
T2 = MakeRandomTensor()
T1[5,,1] == T2[5,,1]
T1[10,,2] = T2[10,,2]
T1[4,,3] = T2[10,,2]
dim(T1)
T1[4,,1] = T2[10,,2]
PCTs = ComputePCTPerSig(T1, T2, format='df')
PCT2
PCTs
head(PCTs)
dimnames(T1)
PCTs = ComputePCTPerSig(T1, T2, format='list')
PCTs
PCTs$R
stopifnot(PCTs$R[5,1] == 1)
PCTs$R[5,1]# == 1
dim(PCTs$R)
set.seed(123)
T1 = MakeRandomTensor()
T2 = MakeRandomTensor()
T1[5,,1] = T2[5,,1]
T1[10,,2] = T2[10,,2]
T1[4,,1] = T2[10,,2]
PCTs = ComputePCTPerSig(T1, T2, format='list')
stopifnot(PCTs$R[5,1] == 1)
stopifnot(PCTs$R[10,2] == 1)
stopifnot(PCTs$R[4,1] < 1)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
TestComputePCTPerSig()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('R/init.R')
AlphaNames(5)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_Utils.R')
source('R/init.R')
tensor = MakeRandomTensor(NA_frac=0)
dim(tensor)
tensor[5,,1] = NA
tensorFull = MakeRandomTensor(NA_frac=0)
tensorNA = tensorFull
tensorNA[5,,1] = NA
tensorComplete = CompleteTensor(matlab, tensorNA, method='mean')
matlab = StartMatlab()
tensorComplete = CompleteTensor(matlab, tensorNA, method='mean')
stopifnot(identical(tensorComplete, tensorFull))
tensorFUll
tensorComplete
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
matlab = StartMatlab()
tensorFull = MakeTensor(NA_frac=0, fill=5)
tensorNA = tensorFull
tensorNA[5,,1] = NA
tensorComplete = CompleteTensor(matlab, tensorNA, method='mean')
tensorComplete
identical(tensorComplete, tensorFull)
tensorComplete = CompleteTensor(matlab, tensorNA, method='mean2')
stopifnot(identical(tensorComplete, tensorFull))
tensorComplete = CompleteTensor(matlab, tensorNA, method='knn')
tensorComplete = CompleteTensor(matlab, tensorNA, method='knnd')
stopifnot(identical(tensorComplete, tensorFull))
tensorComplete = CompleteTensor(matlab, tensorNA, method='fa_lrtc')
stopifnot(identical(tensorComplete, tensorFull))
tensorComplete
tensorComplete[5,1]
tensorComplete[5,,11]
tensorComplete[5,,1]
Norm2(tensorFull[5,,1], tensorComplete[5,,1])
Norm2(tensorFull[5,,1]- tensorComplete[5,,1])
Norm2(tensorFull[5,,1]- tensorComplete[5,,1]) < 0.1
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_CallMatlab.R')
TestCompleteTensor()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
nDrugs * nCells
idx = sample(nDrugs * nCells, nDrugs*nCells*0.1)
idx
length(idx)
?sample
?arrayInd
melt(tensor[,1,])
m = melt(tensor[,1,])
m[idx,]
head(m)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
tensor = MakeTensor(removeSig_frac=0.2)
NumSigs(tensor)
dim(tensor)
NumSigs(tensor, 'drug')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
tensor = MakeTensor(removeSig_frac=0.2)
NumSigs(tensor)
tensor[,1,]
tensor[,2,]
tensor[,3,]
NumSigs(tensor, 'drug')
NumSigs(tensor, 'cell')
NumSigs(tensor, 'gene')
MakeTensor(NA_frac=0, fill=5, removeSig_frac=0.2)
out = CrossValidateTensor(matlab, tensor, methods='mean')
tensor = MakeTensor(nDrugs=50, nCells=10, nGenes=50, NA_frac=0, fill=5, removeSig_frac=0.2)
prod(dim(tensor))
out = CrossValidateTensor(matlab, tensor, methods='mean')
out = CrossValidateTensor(matlab, tensor, methods=c('mean'))
TestMatlab()
TestMatlab()
rm(matlab)
