dim(info)
info$pert_dose
cbind(info$pert_id, info_pert_dose)
cbind(info$pert_id, infopert_dose)
cbind(info$pert_id, info$pert_dose)
info = info[order(info$pert_id),]
cbind(info$pert_id, info$pert_dose)
cbind(hitData$name, hitData$metadata$pert_id)
cbind(info$pert_id, info$pert_dose, info$pert_dose_unit)
cbind(hitData$name, hitData$metadata$pert_id)
cbind(info$pert_id, info$pert_dose, info$cell_id, info$pert_time)
cbind(hitData$name, hitData$metadata$pert_id)
cor(hitData$structure)
JaccardIndexMatrix(hitData$structure)
cbind(hitData$name, hitData$metadata$pert_id)
load(DataDir('compiled_data/drugData.RData'))
x = drugData$expression['DORSOMORPHIN',]
X
x
names(drugData)
drugData$name
drugData$name == 'DORSOMORPHIN'
names(drugData)
drugData$outcomes
rownames(drugData$outcomes)
'DORSOMORPHIN' %in% rownames(drugData$outcomes)
'DORSOMORPHIN-BRD6' %in% rownames(drugData$outcomes)
which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
idx = which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
rownames(drugData$outcomes)[idx] = 'DORSOMORPHIN'
which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
names(drugData)
drugData$metadata$name
'DORSOMORPHIN' %in% drugData$metadata$name
rownames(drugData$metadata)
'DORSOMORPHIN' %in% rownames(drugData$metadata)
'DORSOMORPHIN-BRD6' %in% rownames(drugData$metadata)
rownames(drugData$metadata)[idx] = 'DORSOMORPHIN'
names(drugData)
rownames(drugData$structure)[idx] = 'DORSOMORPHIN'
rownames(drugData$expression_prl)[idx] = 'DORSOMORPHIN'
rownames(drugData$expression)[idx] = 'DORSOMORPHIN'
idx
rownames(drugData$scores)[idx] = 'DORSOMORPHIN'
rownames(drugData$targets)[idx] = 'DORSOMORPHIN'
save(drugData, file=DataDir('compiled_data/drugData.RData'))
load(DataDir('compiled_data/drugData.RData'))
x = drugData$expression['DORSOMORPHIN',]
x
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=TRUE)
x = drugData$expression['DORSOMORPHIN',]
x
sort(x)
?tail
x = sort(drugData$expression['DORSOMORPHIN',])
x
up = names(head(x, K))
x = sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE)
K = 20
up = names(head(x, K))
up
head(x, K)
K
head(x, 1)
class(x)
x = as.vector(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x = as.vector(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x[1:5]
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
K = 20
up = names(head(x, K))
up
down = names(tail(x, K))
down
DEGs = union(up, down)
DEGs
paste(DEGs, collapse=',')
cmd = paste0('curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
out
DEGs
load(DataDir('compiled_data/drugData.RData'))
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=FALSE)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
K = 20
up = names(head(x, K))
down = names(tail(x, K))
DEGs = union(up, down)
cmd = paste0('curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
out
dim(out)
class(out)
length(out$nodes)
length(out$edges)
length(out$version)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out2 = fromJSON(system(cmd, intern=TRUE))
identical(out, out2)
out$edges
E = as.data.frame(out$edges)
dim(E)
E = t(as.data.frame(out$edges))
dim(E)
head(E)
rownames(E) = NULL
head(E)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=false ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
head(out$edges)
E = t(as.matrix(out$edges))
dim(E)
head(E)
E = as.matrix(out$edges)
dim(E)
E[1]
E = t(as.data.frame(out$edges))
dim(E)
E = t(data.frame(out$edges))
E = t(data.frame(out$edges))
dim(E)
E = as.data.frame(out$edges)
dim(E)
class(out$edges)
A = ldply(out$edges, function(a) c(a$source, a$target, a$weight)
)
dim(A)
E = ldply(out$edges, function(a) c(a$source, a$target, a$weight))
dim(E)
head(E)
E = ldply(out$edges, function(a) list(source=a$source, target=a$target, weight=a$weight))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
head(E)
E = subset(E, weight >= weight_cutoff)
numDEGs = 20 # in each direction
weight_cutoff = 0.5
E = subset(E, weight >= weight_cutoff)
dim(E)
E = subset(E, weight >= weight_cutoff)
dim(E)
weight_cutoff = 0.7
E = subset(E, weight >= weight_cutoff)
dim(E)
union(E$source, E$target)
unique(union(E$source, E$target))
length(unique(union(E$source, E$target)))
nodes = union(E$source, E$target)
nodes
anyDuplicated(nodes)
numDEGs = 20 # in each direction
weightCutoff = 0.7
numGenesToAdd = 50
load(DataDir('compiled_data/drugData.RData'))
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=FALSE)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
up = names(head(x, numDEGs))
down = names(tail(x, numDEGs))
DEGs = union(up, down)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 ',
'-d tissue=bronchial_epithelial_cell ',
sprintf('-d num_genes=%d -d prior=0.10 -d enum=false ', numGenesToAdd),
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
E = subset(E, weight >= weightCutoff)
nodes = union(E$source, E$target)
print(sprintf('Out of %d input DEGs and %d added genes, %d remain in the network with edges > %0.2f.',
2*numDEGs, numGenesToAdd, length(nodes), weightCutoff))
print(sprintf('Of these %d remaining nodes, %d are from the DEGs, and %d are from the added genes',
length(nodes), length(intersect(nodes, DEGs)), length(setdiff(nodes, DEGs))))
testAll = FALSE
source('R/init.R')
load(DataDir('compiled_data/drugData.RData'))
GetInhibitors(drugData, thresh=0.5)
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
hitsABC
n=load(OutputDir('large_cluster_compare/large_cluster.RData'))
n
large_clutser
large_cluster
hitsABC %ni% large_cluster
hitsABC[hitsABC %ni% large_cluster]
load(OutputDir('large_cluster_compare/large_cluster.RData'))
large_cluster[large_cluster == 'BRD-K54233340'] = 'DORSOMORPHIN'
large_cluster[large_cluster == 'BRD-K95901403'] = 'XL147'
hitsABC[hitsABC %ni% large_cluster]
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
xsd
xsd['DDIT4']
ysd['DDIT4']
x['DDIT4']
y['DDIT4']
rownames(R)
R$C
R['C',]
sg$C
sg$C$INH
G[sg$C$INH,]
dim(G[sg$C$INH,])
sg$C$HIT
y = G["C---DORSOMORPHIN",]
dim(y)
Norm2(y)
Norm2(x)
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = G["C---DORSOMORPHIN",]
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
dim(x)
length(x)
length(y)
dim(y)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
dim(y)
length(y)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
# Just compare Dorsomorphin to all 8 inhibitors
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
resid = lm(y ~ x)$residuals
resid
M = as.matrix(resid)
dim(M)
M = as.matrix(t(resid))
rownames(M)
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=c('resid', names(resid)))
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=list('resid', names(resid)))
GMT = SubsetGMTByNThresh(GetGMT(), nThreshold=10)
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dorsomorphin_v_inhibitors')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
paea = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res
res = MergePAEAResults(paea[[1]], adjPThresh=0.01)
dim(res)
res
res[order(res$adjp),]
lmGenes = GetLmGenes(type = 'symbol')
lmGenes
'CLOCK' %in% lmGenes
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
Write2XLS('res', file=OutputDir('dorsomorphin/double_diff_enrichments.xlsx'))
getwd()\
getwd()
setwd('/Users/rhodos/Desktop/Dropbox/LINCS/submission/dgc_predict')
ls()
testALL = TRUE
source('r/init.R')
rm(list=ls())
source('R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('R/test/test_DataProc.R')
info = LoadCDInfo(debug=TRUE)
info
dim(info)
unique(info$pert_id)
length(unique(info$pert_id))
dim(info)
info2 = SelectTopNDrugs(info=info, nDrugs=100)
info2$pert_id
unique(info2$pert_id)
length(unique(info2$pert_id))
n = 100
info2 = SelectTopNDrugs(info=info, nDrugs=n)
stopifnot(length(unique(info2$pert_id)) == n)
info$pert_id %in% info2$pert_id
which(info$pert_id %in% info2$pert_id)
rownames(info2)
info[rownames(info2),]
info[setdiff(rownames(info), rownames(info2)),'pert_id'] %in% info2$pert_id
any(info[setdiff(rownames(info), rownames(info2)),'pert_id'] %in% info2$pert_id)
stopifnot(all(info[setdiff(rownames(info), rownames(info2)),'pert_id'] %ni% info2$pert_id))
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DefineTensor.R')
TestSelectTopNDrugs()
length(unique(info$cell_id))
unique(info$cell_id)
info2 = SelectTopNCells(info=info, nCells=n)
info = LoadCDInfo(debug=TRUE)
n = 1
info2 = SelectTopNCells(info=info, nCells=n)
length(unique(info2$cell_id))
stopifnot(all(info[setdiff(rownames(info), rownames(info2)),'cell_id'] %ni% info2$cell_id))
TestSelectTopNCells()
info = LoadCDInfo(debug=TRUE)
n = 1
info2 = SelectTopNCells(info=info, nCells=n)
stopifnot(length(unique(info2$cell_id)) == n)
stopifnot(all(info[setdiff(rownames(info), rownames(info2)),'cell_id'] %ni% info2$cell_id))
TestSelectTopNCells = function(){
info = LoadCDInfo(debug=TRUE)
n = 1
info2 = SelectTopNCells(info=info, nCells=n)
stopifnot(length(unique(info2$cell_id)) == n)
stopifnot(all(info[setdiff(rownames(info), rownames(info2)),'cell_id'] %ni% info2$cell_id))
}
TestSelectTopNCells()
TestEnsureNPerCell = function(){#dummy}
TestEnsureNPerDrug = function(){#dummy}
TestSummarizeInfo = function(){#dummy}
TestSummarizeTensor = function(){}
TestLoadCDSigs = function(){}
TestLoadCDInfo = function(){}
TestWriteTensor2Mat = function(){}
dim(info)
names(info)
info = LoadCDInfo(debug=TRUE)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/DefineTensor.R')
info = LoadCDInfo(debug=TRUE)
dim(info)
info = LoadCDInfo(debug=FALSE)
dim(info)
sigs = LoadCDSigs(debug=TRUE)
dim(sigs)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/DefineTensor.R')
sigs = LoadCDSigs(debug=TRUE)
sigs
dim(sigs)
sigs = LoadCDSigs(debug=FALSE)
dim(sigs)
stopifnot(dim(sigs) == c(389031, 978))
sigs = LoadCDSigs(debug=FALSE)
dim(sigs)
sigs = LoadCDSigs(debug=TRUE)
dim(sigs)
sigs = LoadCDSigs(debug=TRUE)
stopifnot(dim(sigs) == c(1000,978))
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DefineTensor.R')
TestLoadCDSigs()
TestLoadInfo(0)
TestLoadInfo()
TestLoadCDInfo()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DefineTensor.R')
TestLoadCDInfo()
info = LoadCDInfo(debug=TRUE)
stopifnot(dim(info) == c(1000, 13))
info = LoadCDInfo(debug=FALSE)
dim(info)
rownames(info)
dim(info)
as.numeric(rownames(info))
max(as.numeric(rownames(info)))
dim(sigs)
rownames(sigs)
sigs = LoadCDSigs(debug=FALSE)
max(as.numeric(rownames(sigs)))
rownames(info)
rownames(info) %in% rownames(sigs)
all(rownames(info) %in% rownames(sigs))
dim(sigs)
class(sigs)
sigs = sigs[rownames(info),]
dim(sigs)
dim(info)
identical(rownames(sigs), rownames(info))
save(sigs, file=DataDir('expr/drugSigs.RData'))
names(sigs)
identical(GetGeneIdsTensor(), names(sigs))
names(sigs)
GetGeneIdsTensor()
class(GetGeneIdsTensor())
class(names(sigs))
c(names(sigs), GetGeneIdsTensor())
length(names(sigs))
length(GetGeneIdsTensor())
cbind(names(sigs), GetGeneIdsTensor())
names(sigs)== GetGeneIdsTensor()
all(names(sigs)== GetGeneIdsTensor())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/DefineTensor.R')
LoadCDSigs(debug=TRUE)
sigs = LoadCDSigs(debug=TRUE)
dim(sigs)
sigs = LoadCDSigs(debug=FALSE)
dim(sigs)
identical(rownames(sigs), rownames(info))
head(sigs)
NDrugSigs = function(){
return(201484)
}
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_TensorROC.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DefineTensor.R')
TestNDrugSigs()
NDrugSigs()
class(NDrugSigs())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DefineTensor.R')
TestNDrugSigs()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DataProc.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/EvaluateTensor.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/GSEA.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
?reshape2
?wrap
n= load(DataDir('tensors/T_small.RData'))
n
X = T_small
M1 = UnfoldTensor(X, 1)
M2 = UnfoldTensor(X, 2)
M3 = UnfoldTensor(X, 3)
dim(M1)
dim(M2)
dim(M3)
5*44
4*55
stopifnot(rownames(M1) == dimnames(X)[[1]])
stopifnot(rownames(M2) == dimnames(X)[[2]])
stopifnot(rownames(M3) == dimnames(X)[[3]])
n = dim(X)[1]
n
list[a, b] = unlist(strsplit(colnames(M1)[n], '[.]'))
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
list <- structure(NA,class="result")
TestUnfoldTensor()
list <- structure(NA,class="result")
TestUnfoldTensor()
list <- structure(NA,class="result")
TestUnfoldTensor()
list <- structure(NA,class="result")
TestUnfoldTensor()
list <- structure(NA,class="result")
TestUnfoldTensor()
list <- structure(NA,class="result")
TestUnfoldTensor()
list = structure(NA,class="result")
TestUnfoldTensor()
list = structure(NA,class="result")
TestUnfoldTensor()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DataProc.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_DataProc.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/REGENERATE_ALL_FIGURES.R')
