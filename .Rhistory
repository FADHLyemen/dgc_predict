length(out$nodes)
length(out$edges)
length(out$version)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out2 = fromJSON(system(cmd, intern=TRUE))
identical(out, out2)
out$edges
E = as.data.frame(out$edges)
dim(E)
E = t(as.data.frame(out$edges))
dim(E)
head(E)
rownames(E) = NULL
head(E)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=false ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
head(out$edges)
E = t(as.matrix(out$edges))
dim(E)
head(E)
E = as.matrix(out$edges)
dim(E)
E[1]
E = t(as.data.frame(out$edges))
dim(E)
E = t(data.frame(out$edges))
E = t(data.frame(out$edges))
dim(E)
E = as.data.frame(out$edges)
dim(E)
class(out$edges)
A = ldply(out$edges, function(a) c(a$source, a$target, a$weight)
)
dim(A)
E = ldply(out$edges, function(a) c(a$source, a$target, a$weight))
dim(E)
head(E)
E = ldply(out$edges, function(a) list(source=a$source, target=a$target, weight=a$weight))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
head(E)
E = subset(E, weight >= weight_cutoff)
numDEGs = 20 # in each direction
weight_cutoff = 0.5
E = subset(E, weight >= weight_cutoff)
dim(E)
E = subset(E, weight >= weight_cutoff)
dim(E)
weight_cutoff = 0.7
E = subset(E, weight >= weight_cutoff)
dim(E)
union(E$source, E$target)
unique(union(E$source, E$target))
length(unique(union(E$source, E$target)))
nodes = union(E$source, E$target)
nodes
anyDuplicated(nodes)
numDEGs = 20 # in each direction
weightCutoff = 0.7
numGenesToAdd = 50
load(DataDir('compiled_data/drugData.RData'))
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=FALSE)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
up = names(head(x, numDEGs))
down = names(tail(x, numDEGs))
DEGs = union(up, down)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 ',
'-d tissue=bronchial_epithelial_cell ',
sprintf('-d num_genes=%d -d prior=0.10 -d enum=false ', numGenesToAdd),
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
E = subset(E, weight >= weightCutoff)
nodes = union(E$source, E$target)
print(sprintf('Out of %d input DEGs and %d added genes, %d remain in the network with edges > %0.2f.',
2*numDEGs, numGenesToAdd, length(nodes), weightCutoff))
print(sprintf('Of these %d remaining nodes, %d are from the DEGs, and %d are from the added genes',
length(nodes), length(intersect(nodes, DEGs)), length(setdiff(nodes, DEGs))))
testAll = FALSE
source('R/init.R')
load(DataDir('compiled_data/drugData.RData'))
GetInhibitors(drugData, thresh=0.5)
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
hitsABC
n=load(OutputDir('large_cluster_compare/large_cluster.RData'))
n
large_clutser
large_cluster
hitsABC %ni% large_cluster
hitsABC[hitsABC %ni% large_cluster]
load(OutputDir('large_cluster_compare/large_cluster.RData'))
large_cluster[large_cluster == 'BRD-K54233340'] = 'DORSOMORPHIN'
large_cluster[large_cluster == 'BRD-K95901403'] = 'XL147'
hitsABC[hitsABC %ni% large_cluster]
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
xsd
xsd['DDIT4']
ysd['DDIT4']
x['DDIT4']
y['DDIT4']
rownames(R)
R$C
R['C',]
sg$C
sg$C$INH
G[sg$C$INH,]
dim(G[sg$C$INH,])
sg$C$HIT
y = G["C---DORSOMORPHIN",]
dim(y)
Norm2(y)
Norm2(x)
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = G["C---DORSOMORPHIN",]
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
dim(x)
length(x)
length(y)
dim(y)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
dim(y)
length(y)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
# Just compare Dorsomorphin to all 8 inhibitors
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
resid = lm(y ~ x)$residuals
resid
M = as.matrix(resid)
dim(M)
M = as.matrix(t(resid))
rownames(M)
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=c('resid', names(resid)))
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=list('resid', names(resid)))
GMT = SubsetGMTByNThresh(GetGMT(), nThreshold=10)
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dorsomorphin_v_inhibitors')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
paea = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res
res = MergePAEAResults(paea[[1]], adjPThresh=0.01)
dim(res)
res
res[order(res$adjp),]
lmGenes = GetLmGenes(type = 'symbol')
lmGenes
'CLOCK' %in% lmGenes
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
Write2XLS('res', file=OutputDir('dorsomorphin/double_diff_enrichments.xlsx'))
testAll = FALSE
makePlots = TRUE
source('R/init.R')
library(R.matlab)
sz = 'large'
fullDataset = TRUE
loadMergeAndPred = FALSE
if(fullDataset){
# just load measured and CV tensors (takes a long time to run)
source('R/scripts/load_all_tensors.R')
}else{
tensors = list()
tensors$meas = LoadTensorMat(DataDir('tensors/T50_1.RData'))
matlab = StartMatlab()
for(method in c('mean', 'mean2', 'knn', 'fa_lrtc')){
if(method == 'fa_lrtc'){
mthd = 'tensor'
}else{mthd = method}
tensors$cv[[mthd]] = CrossValidateTensor(matlab, tensors$meas, method, dataset,
nFolds = NumSigs(tensors$meas),
maxFolds = NumSigs(tensors$meas))
dimnames(tensors$cv[[mthd]]) = dimnames(tensors$meas)
}
close(matlab)
rm(matlab)
}
rm(list=ls())
setwd('/Users/rhodos/Desktop/Dropbox/LINCS/submission/dgc_predict')
testAll = FALSE
makePlots = TRUE
source('R/init.R')
library(R.matlab)
sz = 'large'
fullDataset = TRUE
loadMergeAndPred = FALSE
if(fullDataset){
# just load measured and CV tensors (takes a long time to run)
source('R/scripts/load_all_tensors.R')
}else{
tensors = list()
tensors$meas = LoadTensorMat(DataDir('tensors/T50_1.RData'))
matlab = StartMatlab()
for(method in c('mean', 'mean2', 'knn', 'fa_lrtc')){
if(method == 'fa_lrtc'){
mthd = 'tensor'
}else{mthd = method}
tensors$cv[[mthd]] = CrossValidateTensor(matlab, tensors$meas, method, dataset,
nFolds = NumSigs(tensors$meas),
maxFolds = NumSigs(tensors$meas))
dimnames(tensors$cv[[mthd]]) = dimnames(tensors$meas)
}
close(matlab)
rm(matlab)
}
load(ResultsDir('large/entity_specific_accuracy.RData'))
load(DataDir('metadata/tensor_annot.RData'))
# My question is, does KNN perform better in cases where a drug has a close neighbor? And does Tensor perform better otherwise?
D = data.frame(drug=annot$pertName, dnpp=C$dnpp$drug, tensor=C$tensor$drug)
n = 2130
load('Sc.RData')
testArray <- do.call(abind, c(Sc, along = 3))
library(abind)
install.packages('abind')
library(abind)
testArray <- do.call(abind, c(Sc, along = 3))
dim(testArray)
X = testArray
rm(testArray)
S = apply(X[,,1:4], 1:2, function(x) mean(x, na.rm=TRUE))
S = array(data=0, dim=c(n, n), dimnames=list(annot$pertName, annot$pertName))
for(i in 1:n){
print(i)
for(j in IncreasingSequence(i+1,n)){
S[i,j] = mean(X[i,j,], na.rm=TRUE)
}
}
S2 = SymmetrifyMatrix(S)
identical(GetUpperTriVec(S), GetUpperTriVec(S2))
diag(S)
diag(S2)
GetUpperTriVec(C)
GetUpperTriVec(S)
cbind(GetUpperTriVec(S), GetUpperTriVec(S2))
identical(GetUpperTriVec(S), GetUpperTriVec(S2))
max(abs(GetUpperTriVec(S)- GetUpperTriVec(S2)))
max(abs(GetUpperTriVec(S)- GetUpperTriVec(S2)), na.rm=TRUE)
S[1:5,1:5]
S2[1:5,1:5]
S2 = SymmetrifyMatrix(S)
idx = apply(S2, 1, function(x) which.max(x, na.rm=TRUE))
idx = apply(S2, 1, which.max)
idx
hist(S2[idx])
MultiDens(all=GetUpperTriVec(S), top=S2[idx])
MultiDens(list(all=GetUpperTriVec(S), top=S2[idx]))
MultiDens(list(all=GetUpperTriVec(S), top=S2[idx]))
idx
top_neighbor_strength = apply(1:nrow(S2), 1, function(i) S2[i,idx[i]])
top_neighbor_strength = sapply(1:nrow(S2), 1, function(i) S2[i,idx[i]])
top_neighbor_strength = sapply(1:nrow(S2), function(i) S2[i,idx[i]])
hist(top_neighbor_strength)
hist(GetUpperTriVec(S2))
max_neighbor = apply(S2, function(x) max(x, na.rm=TRUE))
max_neighbor = apply(S2, 1, function(x) max(x, na.rm=TRUE))
identical(max_neighbor, top_neighbor_strength)
max_neighbor - top_neighbor_strength
cor(D$dnpp - D$tensor, max_neighbor)
cor(D$dnpp, max_neighbor)
dor(D$tensor, max_neighbor)
cor(D$tensor, max_neighbor)
mean_similarity = apply(S2, 1, function(x) mean(x, na.rm=TRUE))
cor(mean_similarity, D$dnpp)
cor(mean_similarity, D$tensor)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_4AB_cell_specific_drugs_NEW.R')
NumSigs(tensors$meas, 'cell')
sort(NumSigs(tensors$meas, 'cell'))
GetDrugSlice <- function(tensor, drug){
return(t(na.omit(t(tensor[drug,,]))))
}
distfunc <- function(x) as.dist((1-cor(x))/2)
annot = GetLincsAnnot()
gsea = list()
results = list()
minGeneSetSize = 5
pert = annot$pert_id[which(annot$name == 'M-3M3FBS')]
pert
M = GetDrugSlice(tensors$meas, pert)
cells1 = c('A549','AGS','RKO','MCF7')
cells2 = setdiff(colnames(M), union(cells1, c('SKB', 'VCAP')))
stopifnot(length(cells1)==4)
stopifnot(length(cells2)==9)
sig_sm = apply(M[,cells1], 1, mean)
sig_lg = apply(M[,cells2], 1, mean)
gsea$M$sm = RunGsea(profile=sig_sm, dz_genes_up = names(sig_sm),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
names(results)
gsea$M$lg = RunGsea(profile=sig_lg, dz_genes_up = names(sig_sm),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
results$M3 = lapply(gsea$M, function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=0.05))
# --------------------
# HY-11007 (AKA GNF-2)
pert = annot$pert_id[which(annot$name == 'HY-11007')]
M = GetDrugSlice(tensors$meas, pert)
cells2 = setdiff(colnames(M), 'ASC')
stopifnot(length(cells2)==4)
sig_sm = M[,'ASC']
sig_lg = apply(M[,cells2], 1, mean)
gsea$H$sm = RunGsea(profile=sig_sm, dz_genes_up = names(sig_sm),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
gsea$H$lg = RunGsea(profile=sig_lg, dz_genes_up = names(sig_sm),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
results$HY = lapply(gsea$H, function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=0.05))
results
lapply(results, function(x) subset(x, FDR<0.25))
test = unlist(results, recursive=FALSE)
names(test)
lapply(test, function(x) subset(x, FDR<0.25))
test$M3.lg
colnames(M)
sig_sm
sig_lg
names(sig_sm)
lapply(test, function(x) subset(x, FDR<0.25))
dim(tensors$meas)
pert = annot$pert_id[which(annot$name == 'M-3M3FBS')]
M = GetDrugSlice(tensors$meas, pert)
cells1 = c('A549','AGS','RKO','MCF7')
cells2 = setdiff(colnames(M), union(cells1, c('SKB', 'VCAP')))
stopifnot(length(cells1)==4)
stopifnot(length(cells2)==9)
sig_sm = apply(M[,cells1], 1, mean)
sig_lg = apply(M[,cells2], 1, mean)
gsea$M$sm2 = RunGsea(profile=sig_sm, dz_genes_up = names(sig_sm),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
gsea$M$sm
gsea$M$sm2
results$M3 = lapply(gsea$M, function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=0.05))
results$M3
pert = annot$pert_id[which(annot$name == 'carbocetin')]
M = GetDrugSlice(tensors$meas, pert)
pert = annot$pert_id[which(annot$name == 'carbetocin')]
M = GetDrugSlice(tensors$meas, pert)
annot$name
sort(annot$name)
grepl('carb', annot$name)
which(grepl('carb', annot$name))
which(grepl('CARB', annot$name))
which(grepl('CARBETOCIN', annot$name))
pert = annot$pert_id[which(annot$name == 'CARBETOCIN')]
M = GetDrugSlice(tensors$meas, pert)
dim(M)
colnames(M)
rownames(M)
names(sig_sm)
set.seed(42)
test1 = RunGsea(profile=sig_sm, dz_genes_up=names(sig_sm), minGeneSetSize=40, doGSOA=FALSE, doGSEA=TRUE)
set.seed(42)
test2 = RunGsea(profile=sig_sm, dz_genes_up=names(sig_sm), minGeneSetSize=40, doGSOA=FALSE, doGSEA=TRUE)
identical(test1, test2)
test1
test_all = lapply(list(one=test1, two=test2), function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=1))
test_all
identical(test_all$one, test_all$two)
set.seed(42)
pert = annot$pert_id[which(annot$name == 'CARBETOCIN')]
M = GetDrugSlice(tensors$meas, pert)
for(cell in colnames(M)){
print(cell)
gsea$C[[cell]] = RunGsea(profile=M[,cell], dz_genes_up = rownames(M),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
}
names(gsea)
gsea$C = list()
for(cell in colnames(M)){
print(cell)
gsea$C[[cell]] = RunGsea(profile=M[,cell], dz_genes_up = rownames(M),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
}
results$CT = lapply(gsea$C, function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=0.05))
results$CT
A = results$CT$MCF7
A[order(A$FDR),]
set.seed(84)
pert = annot$pert_id[which(annot$name == 'CARBETOCIN')]
M = GetDrugSlice(tensors$meas, pert)
gsea$C2 = list()
set.seed(84)
pert = annot$pert_id[which(annot$name == 'CARBETOCIN')]
M = GetDrugSlice(tensors$meas, pert)
for(cell in colnames(M)){
print(cell)
gsea$C2[[cell]] = RunGsea(profile=M[,cell], dz_genes_up = rownames(M),
minGeneSetSize=minGeneSetSize, doGSOA=FALSE, doGSEA=TRUE)
}
results$CT2 = lapply(gsea$C2, function(x) GetGSEAResultsV2(x, merge=TRUE, analysis='GSEA', colname='Adjusted.Pvalue', thresh=0.05))
results$CT
results$CT$VCAP
results$CT2$VCAP
results$CT$A549
results$CT2$A549
results$CT$MCF7
results$CT2$MCF7
A2 = results$CT2$MCF7
A = results$CT$MCF7
intersect(A$Gene.Set.Term, A2$Gene.Set.Term)
results
names(results)
names(results$M3)
save(results, file=ResultsDir('gsea_cell_specific_drugs.RData'))
resultss$CT
results$CT
results$CT$MCF7
subset(results$CT$MCF7, FDR<0.25)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_4AB_cell_specific_drugs_NEW.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_4AB_cell_specific_drugs_NEW.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
annot$pertName
'carbetocin' %in% annot$pertName
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
install.packages('ggrepel')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
library(ggrepel)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_6B-D_entity_specific_accuracy.R')
annot
names(annot)
annot = GetLincsAnnot()
names(annot)
dim(annot)
annot$name
grepl('BRD', annot$name)
which(grepl('BRD', annot$name))
length(which(grepl('BRD', annot$name)))
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/figures/FIGURE_4AB_cell_specific_drugs_NEW.R')
