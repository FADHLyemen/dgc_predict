meanSigs$both[[pd]] = apply(S$lrg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
if(length(na.omit(conductance)) > 0 && all(conductance > 0.8)){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
conductance
length(na.omit(conductance))
length(na.omit(conductance)) > 0
all(conductance > 0.8)
cond_na_omit = as.numeric(na.omit(conductance))
cond_na_omit
cond_na_omit = as.numeric(na.omit(conductance))
if(length(cond_na_omit) > 0 && all(cond_na_omit > 0.8)){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
cond_na_omit
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
cond_na_omit = as.numeric(na.omit(conductance))
if(length(cond_na_omit) > 0 && all(cond_na_omit > 0.8)){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info
info[order(info$pert_id),]
conductance
is.na(conductance)
any(is.na(conductance))
!any(is.na(conductance))
if(!any(is.na(conductance)) && all(conductance > 0.8)){print('yeah')}
length(meanSigs$none)
dim(info)
info
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
if(!any(is.na(conductance)) && all(conductance > 0.8)){
#cond_na_omit = as.numeric(na.omit(conductance))
#if(length(cond_na_omit) > 0 && all(cond_na_omit > 0.8)){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2]))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
dim(S$sm$none)
S$sm$none[1:5,1:5]
info
info = info[-1,]
head(info)
allInfo$`BRD-K18812295_10uM`
dim(allInfo$`BRD-K18812295_10uM`)
info
head(info)
plot(info$outcome_dmso, info$outcome_c18)
cor(info$outcome_dmso, info$outcome_c18)
abline(0,1)
NA > 0.8
!is.na(NA) && NA > 0.8
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
mean_response = mean(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(!is.na(mean_response) && mean_response > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean_response))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
info
plot(info$outcome_dmso, info$outcome_c18)
abline(0, 1)
# Identify relevant experiments (measured drug/dose combinations with conductance not too low)
C = drugData$outcomes
dose_cols = list(c('1uM_mean.dmso', '1uM_mean.c18'),
c('3uM_mean.dmso', '3uM_mean.c18'),
c('10uM_mean.dmso', '10uM_mean.c18'))
dose_ranges = list(c(0.7,1.3), c(2.1, 3.9), c(7,13))
doses = c('1uM', '3uM', '10uM')
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(!is.na(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
info
minR
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, cell_id=NA, outcome_dmso=NA, outcome_c18=NA, mean_response=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert, doses[j], conductance[1], conductance[2], mean(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
info = info[-1,]
warnings()
info
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
rownames(S$sm)
rownames(S$sm$none)
dim(info)
rownames(info) = rownames(S$sm$none)
info
# Identify relevant experiments (measured drug/dose combinations with conductance not too low)
C = drugData$outcomes
dose_cols = list(c('1uM_mean.dmso', '1uM_mean.c18'),
c('3uM_mean.dmso', '3uM_mean.c18'),
c('10uM_mean.dmso', '10uM_mean.c18'))
dose_ranges = list(c(0.7,1.3), c(2.1, 3.9), c(7,13))
doses = c('1uM', '3uM', '10uM')
meanSigs = list()
allInfo = list()
info = data.frame(pert_id=NA, dose=NA, outcome_dmso=NA, outcome_c18=NA, mean=NA, max=NA)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert_id=pert, dose=doses[j],
outcome_dmso=conductance[1], outcome_c18=conductance[2],
mean=mean(conductance, na.rm=TRUE), max=max(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
# Some post-processing
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
info = info[-1,]
rownames(info) = rownames(S$sm$none)
?ifelse
# Binarize outcomes in info:
info$result = 'inconclusive'
info$result[info$max >= 1.25] = 'active'
info$result[info$max < 1.2] = 'inactive'
info
varPart = fitExtractVarPartModel(S$sm$none, ~outcome_dmso , info)
dim(S$sm$none)
dim(info)
fitExtractVarPartModel
?fitExtractVarPartModel
S$sm$none
dim(S$sm$none)
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
dim(t(S$sm$none))
head(info)
info$outcome_dmso
lapply(info, class)
meanSigs = list()
allInfo = list()
fill = -999
info = data.frame(pert_id=NA, dose=NA, outcome_dmso=fill, outcome_c18=fill, mean=fill, max=fill)
for(i in 1:length(drugData$metadata$pert_id)){
pert = drugData$metadata$pert_id[i]
print(pert)
for(j in 1:3){
pdInfo = subset(sigInfo, pert_id == pert & pert_dose >= dose_ranges[[j]][1]
& pert_dose <= dose_ranges[[j]][2])
if(nrow(pdInfo) > 0){
conductance = as.numeric(C[i, dose_cols[[j]]])
minR = min(conductance, na.rm=TRUE)
#if(!any(is.na(conductance)) && all(conductance > 0.8)){
if(is.finite(minR) && minR > 0.8){
pd = paste(pert, doses[j], sep='_')
# average signature
meanSigs$none[[pd]] = apply(S$lg$none[rownames(pdInfo),], 2, mean)
meanSigs$batch[[pd]] = apply(S$lg$batch[rownames(pdInfo),], 2, mean)
meanSigs$both[[pd]] = apply(S$lg$both[rownames(pdInfo),], 2, mean)
# get metadata: cell_ids, pert_doses, and outcomes
info = rbind(info, c(pert_id=pert, dose=doses[j],
outcome_dmso=conductance[1], outcome_c18=conductance[2],
mean=mean(conductance, na.rm=TRUE), max=max(conductance, na.rm=TRUE)))
# store extended metadata for reference
allInfo[[pd]] = pdInfo
}
}
}
}
# Some post-processing
S$sm = lapply(meanSigs, function(x){out = laply(x, identity); rownames(out) = names(x); return(out)})
info = info[-1,]
rownames(info) = rownames(S$sm$none)
# Binarize outcomes in info:
info$result = 'inconclusive'
info$result[info$max >= 1.25] = 'active'
info$result[info$max < 1.2] = 'inactive'
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
info$outcome_dmso
info$max
class(info)
info$max >= 1.25
lapply(info, class)
tmp = info
cols = c('outcome_dmso', 'outcome_c18', 'mean', 'max', 'result')
info[,cols] = lapply(info[,cols], as.numeric)
info
info = tmp
tmp
info
cols = c('outcome_dmso', 'outcome_c18', 'mean', 'max')
info[,cols] = lapply(info[,cols], as.numeric)
info
info$outcome_dmso
varPart = fitExtractVarPartModel(t(S$sm$none), ~outcome_dmso, info)
vp = sortCols(varPart)
vp
varPart
vp = varPart
vp[order(vp$outcome_dmso),]
vp[order(vp$outcome_dmso, decreasing=TRUE),]
vp[order(vp$outcome_dmso, decreasing=TRUE)[1:30],]
vp = sortCols(varPart)
plotPercentBars(vp[order(vp$outcome_dmso,decreasing=TRUE)[1:30],])
plotVarPart(vp)
plotVarPart(vp[,1])
vp[,1]
hist(varPart$outcome_dmso)
head(info)
v_dmso = varPart
v_c18 = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info)
hist(v_c18)
hist(v_c18$outcome_c18)
cor(v_c18$outcome_c18, v_dmso$outcome_dmso)
plot(v_c18$outcome_c18, v_dmso$outcome_dmso)
v_mean = fitExtractVarPartModel(t(S$sm$none), ~mean, info)
v_max = fitExtractVarPartModel(t(S$sm$none), ~max, info)
info_sub = subset(info, result %in% c('active', 'inactive'))
info_sub
A = S$sm$none[rownames(info_sub),]
dim(A)
dim(S$sm$none)
v_bin = fitExtractVarPartModel(t(A), ~result, info_sub)
V = data.frame(dmso=v_dmso$outcome_dmso, c18=v_c18$outcome_c18,
mean=v_mean$mean, max=v_max$max, binary=v_bin$result)
plotVarPart(V)
?sample
sample(nrow(info))
sample(nrow(info), replace=FALSE)
set.seed(123)
set.seed(123)
v_rand = list()
for(i in 1){
info_shuf = info[sample(nrow(info)),]
v_rand[[i]] = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info_shuf)
}
hist(v_rand[[i]]$outcome_c18)
V$rand1 = v_rand[[1]]$outcome_c18
plotVarPart(V)
cor(V$dmso, V$rand1)
cor(V$dmso, V$c18)
for(i in 2){
info_shuf = info[sample(nrow(info)),]
v_rand[[i]] = fitExtractVarPartModel(t(S$sm$none), ~outcome_c18, info_shuf)
}
V[[paste0('rand', str(i))]] = v_rand[[i]]$outcome_c18
plotVarPart(V)
cor(V$rand1, V$rand)
cor(V$binary, V$dmso)
paste0('rand', str(i))
paste0('rand', i)
names(V)
save(V, OutputDir('active_v_inactive/variance_partition_take1.RData'))
save(V, file=OutputDir('active_v_inactive/variance_partition_take1.RData'))
minCutoff = .5
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
plotVarPart(V, main='Percent of explained variance per gene, no batch correction')
plotVarPart(V, main=sprintf('No batch correction, min cutoff = %0.2f', 0.8))
ggsave(file=PlotDir(sprintf('varPart_%0.2fcutoff_no_correction.pdf', 0.8)))
dir = OutputDir('active_v_inactive')
minCutoff = .5
source('~/Box Sync/CFDR/cfdr/code/R/scripts/compare_sigs/get_relevant_L1000_sigs_for_CF_active_inactive_analysis.R')
A = data.frame(x=0)
A$y = rep(1, 10)
A
dim(S$sm)
dim(S$sm$none)
?gage
library(gage)
?gage
setwd('~/Desktop/Research/LINCS/submission/dgc_predict')
testAll = FALSE
source('R/init.R')
library(R.matlab)
library(ggplot2)
require(plyr)
writeToFile = TRUE
###### load data
D = list()
for(method in c('mean', 'mean2', 'knnd', 'fa_lrtc')){
out2 = list()
for(tensor_size in 5){
out1 = list()
for(rep_num in 1:5){
file = ResultsDir(sprintf('small/obs_density/%s_C_size%d_rep%d.mat',
method, tensor_size, rep_num))
out1[[rep_num]] = readMat(file)$C[,1:6]
}
tmp = do.call('rbind', out1)
dimnames(tmp) = list(replicate=1:25, density=seq(10,60,10))
out2[[tensor_size]] = as.data.frame(as.table(tmp))
out2[[tensor_size]]$tensor_size = tensor_size
}
df = do.call('rbind', out2)
df = ChangeColumnName(df, from='Freq', to='corr')
### reshape data
df2 = DataSummary(df[,c('corr', 'density', 'tensor_size')],
varname='corr', groupnames=c('density', 'tensor_size'))
nDrug = 300
nGene = 978
nCell = 15
n = seq(50, nDrug, length.out = 5)
df2$num_drugs = as.factor(n[df2$tensor_size])
D[[method]] = df2
}
D2 = ldply(D, data.frame)
df2 = ChangeColumnName(D2, from='.id', to='method')
df2$method = as.factor(df2$method)
df2$method = revalue(df2$method, c('mean'='1D-Mean', 'mean2'='2D-Mean', 'knnd'='DNPP', 'fa_lrtc'='Tensor'))
head(df2)
subset(df2, method=='Tensor')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
knitr::opts_knit$set(root.dir = '../../')
numSigs = c(MCF7=1505, VCAP=1368, PC3=1340, A375=1168, A549=1139,
HA1E=1127, HT29=1022, HCC515=934, HEPG2=798, NPC=441)
Rmeas$num_sigs = numSigs[Rmeas$feature]
ggplot(Rmeas, aes(x=reorder(feature, -diff, FUN=median), y=diff, group=feature, fill=num_sigs)) +  geom_hline(yintercept = 0, color='grey', lwd=1) +
geom_boxplot(alpha=0.9) +
ggtitle(sprintf('Deltas per feature, threshold = %0.1f', threshold)) +
theme_bw() + ylim(c(-0.5,0.5)) + scale_fill_gradientn(colours=brewer.pal(5,'YlOrRd')) +
theme(text = element_text(size=22), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size=24, hjust=0.5),
legend.justification='bottom', legend.position='bottom') +
labs(fill='# Signatures  \n  Measured\n', x='', y=expression(AUC [impute] - AUC [orig]),
title='Improvement in AUC per\n Drug Signature Type')
ggsave(PlotDir('DeltaAUC_per_Feature.svg'), height=7, width=8)
ggplot(Rmeas, aes(x=reorder(outcome, -diff, FUN=median), y=diff, group=outcome, fill=category)) + ylim(c(-0.5,0.5)) +
geom_hline(yintercept = 0, color='grey', lwd=1) + geom_boxplot(alpha=0.8) + scale_fill_manual(values=c('#CC9966','#009999')) +
ggtitle(sprintf('Deltas per outcome, threshold = %0.1f', threshold)) + theme_bw() +
labs(x='', y=expression(AUC [impute] - AUC [orig]), title='Improvement in AUC per\n Prediction Task',
fill='Category') +
theme(text = element_text(size=22), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size=24, hjust=0.5),
legend.justification='bottom', legend.position='bottom')
ggsave(PlotDir('DeltaAUC_per_Outcome.svg'), height=7, width=8)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ATC$outcome
revalue(ATC$outcome, c('C'='C: Cardiovascular', 'D'='D: Dermatologicals', 'L'='L: Antineoplastics and Immunomodulatory Agents'))
head(ATC)
ATC$outcome = revalue(ATC$outcome, c('C'='C: Cardiovascular', 'D'='D: Dermatologicals', 'L'='L: Antineoplastics and Immunomodulatory Agents'))
head(ATC)
ggplot(ATC, aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=7, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=5, color='black', check_overlap=TRUE) + theme_bw() +
guides(color=guide_legend(title='ATC Code', nrow=2)) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=18), axis.title=element_text(size=22),
legend.text=element_text(size=18), legend.title=element_text(size=22),
legend.position='bottom', legend.justification='bottom', )
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
