g
E(g)$weight
plot(g, edge.width=E(g)$weight)
plot(g, edge.width=5*E(g)$weight)
plot(g, edge.width=5*E(g)$weight^2)
plot(g, edge.width=5*E(g)$weight^3)
E(g)
E(g)$weight
E(g)$weight > q
E(g)$label = ifelse(E(g)$weight > q, '*', '')
g = graph.adjacency(C_hits, mode="undirected", weighted=TRUE)
g = simplify(g, remove.loops=TRUE)
E(g)$label = ifelse(E(g)$weight > q, '*', '')
plot(g, edge.width=5*E(g)$weight^3)
plot(g, edge.width=5*E(g)$weight^3, edge.label.font=24)
plot(g, edge.width=5*E(g)$weight^3, edge.label.font=100)
plot(g, edge.width=5*E(g)$weight^3, edge.label.font=1000)
?igraph
plot(g, edge.width=5*E(g)$weight^3, label.cex=5)
plot(g, edge.width=5*E(g)$weight^3, edge.label.cex=5)
plot(g, edge.width=5*E(g)$weight^3, edge.label.cex=3)
plot(g, edge.width=5*E(g)$weight^3, edge.label.cex=2)
g = graph.adjacency(C_hits, mode="undirected", weighted=TRUE)
g = simplify(g, remove.loops=TRUE)
E(g)$label = ifelse(E(g)$weight > q, '*', '')
pdf(PlotDir('drug_relationships.pdf'))
plot(g, edge.width=5*E(g)$weight^3, edge.label.cex=2)
dev.off()
pdf(PlotDir('drug_relationships.pdf'))
plot(g, edge.width=5*E(g)$weight^5, edge.label.cex=2)
dev.off()
plot(g, edge.width=5*(E(g)$weight)^5, edge.label.cex=2)
dev.off()
g = graph.adjacency(C_hits, mode="undirected", weighted=TRUE)
g = simplify(g, remove.loops=TRUE)
E(g)$label = ifelse(E(g)$weight > q, '*', '')
pdf(PlotDir('drug_relationships.pdf'))
plot(g, edge.width=5*(E(g)$weight)^5, edge.label.cex=2)
dev.off()
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=5*(E(g)$weight)^5, edge.label.cex=2)
dev.off()
set.seed(123)
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=5*(E(g)$weight)^5, edge.label.cex=2)
dev.off()
MultiDens(list(C), alpha=0.5)
MultiDens(list(C), alpha=0.5)
ggsave(PlotDir('distribution_of_random_drug_pair_correlations.pdf'))
q
MultiDens(list(C), alpha=0.5) + theme(text=element_text(size=24))
MultiDens(list(C), alpha=0.5) + theme(text=element_text(size=24)) + guide(legend=FALSE)
MultiDens(list(C), alpha=0.5) + theme(text=element_text(size=24)) + legend(guide=FALSE)
MultiDens(list(C), alpha=0.5) + theme(text=element_text(size=24)) + legend(variable=FALSE)
MultiDens(list(C), alpha=0.5) + theme(text=element_text(size=24)) #+ legend(variable=FALSE)
ggsave(PlotDir('distribution_of_random_drug_pair_correlations.pdf'))
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2)
dev.off()
set.seed(123)
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2)
dev.off()
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, node.label.cex=2)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, node.label.cex=2)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, label.cex=2)
?igraph
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, vertex.label.cex=2)
dev.off()
set.seed(123)
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, vertex.label.cex=1.5)
dev.off()
set.seed(123)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, vertex.label.cex=1.5)
set.seed(123)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, vertex.label.cex=1.8)
set.seed(123)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=2, vertex.label.cex=1.8, vertex.size=0)
set.seed(123)
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=3, vertex.label.cex=1.8, vertex.size=0)
set.seed(123)
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^3, edge.label.cex=3, vertex.label.cex=1.8, vertex.size=0)
dev.off()
set.seed(123)
plot(g, edge.width=10*(E(g)$weight)^2, edge.label.cex=3, vertex.label.cex=1.8, vertex.size=0)
set.seed(123)
png(PlotDir('drug_relationships.png'))
plot(g, edge.width=10*(E(g)$weight)^2, edge.label.cex=3, vertex.label.cex=1.8, vertex.size=0)
dev.off()
MapSymbolToEntrez(c('CFTR','PI3K','AMPK','RARG','HSP90'))
MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'AMPK','RARG','HSP90'))
MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA','RARG','HSP90'))
MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA1','RARG','HSP90'))
MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA1','PRKAA2', 'RARG','HSP90'))
MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA1','PRKAA2', 'RARG','HSP90AA1','HSP90AB1'))
prior_seeds = MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA1','PRKAA2', 'RARG','HSP90AA1','HSP90AB1'))
priorSeeds = MapSymbolToEntrez(c('CFTR','PIK3CA','PIK3CG', 'PRKAA1','PRKAA2', 'RARG','HSP90AA1','HSP90AB1'))
Seeds
library(igraph)
# *** TO DO:
# Check whether DDIT4 is not as high in level 1 hits, and non-hits
# Permutation parameters
nRand = 1000
# Seed gene parameters
geneSet = 'full'
type = 'rank_expr'
nDEG = 30
#fdrThresh = 0.001
# Drug signature parameters
pThresh = 0.05
pfpThresh = 0.05
time = 6
cell = 'epth'
unit = 'cell'
# Encode parameter settings into a string
params = sprintf('p%0.2f_pfp%0.2f_time%s_cell%s_%sunit',
pThresh, pfpThresh, time, cell, unit)
# Load networks and convert to igraph objects
print('loading networks...')
load(DataDir('networks/all_nets.RData'))
G = lapply(networks, function(net)
graph_from_adjacency_matrix(net, mode = 'directed', weighted = TRUE, diag = FALSE))
rm(networks)
print('...done')
DrugGroups = function(){
#list(A='A', C='C')
list(A='Group A',CD='CD1530',X='XL147')
}
load(DataDir('compiled_data/drugData.RData'))
perts = FALSE
!perts
drugData$metadata$expr_group == 'A'
drugData$metadata$expr_group == 'A' & drugData$metadata$hit_HBE
which(drugData$metadata$expr_group == 'A' & drugData$metadata$hit_HBE)
drugData$metadata$pert_id[which(drugData$metadata$expr_group == 'A' & drugData$metadata$hit_HBE)]
MapDrugNameToPert('CD-1530')
MapDrugNameToPert('CD1530')
MapDrugNameToPert('XL147')
DrugGroups = function(perts=FALSE){
if(!perts){
out = list(A='Group A',CD='CD1530',XL='XL147')
}else{
out = list(A=c("BRD-K94991378","BRD-K25737009", "BRD-A52193669"), CD="BRD-K25737009", XL="BRD-K95901403")
}
return(out)
}
drugs = DrugGroups(perts=TRUE)
drugs
dir = DataDir('drug_sigs/tested_compounds/public_L1000_data_CD/')
load(sprintf('%s/drugSigs_%s.RData', dir, params))
meanSigs = lapply(DrugGroups(), function(dg) apply(laply(drugSigs[[geneSet]]$mean[drugs[[dg]]], identity), 2, mean))
drugSigs$lm$mean
drugs
meanSigs = lapply(drugs, function(dg) apply(laply(drugSigs[[geneSet]]$mean[drugs[[dg]]], identity), 2, mean))
dg = drugs$A
dg
drugs[[dg]]
load(DataDir('compiled_data/drugData.RData'))
drugs = lapply(DrugGroups(), function(dg) subset(drugData$metadata, hit_HBE & expr_group == dg)$pert_id)
drugs
source('~/Box Sync/CFDR/cfdr/code/R/src/DataProc.R')
drugs = lapply(DrugGroups(old=TRUE), function(dg) subset(drugData$metadata, hit_HBE & expr_group == dg)$pert_id)
drugs
drugs = DrugGroups(perts=TRUE)
drugs
lapply(drugs, function(dg) laply(drugSigs[[geneSet]]$mean[drugs[[dg]]]))
dg = drugs[[1]]
meanSigs = lapply(drugs, function(dg) apply(laply(drugSigs[[geneSet]]$mean[drugs[[dg]]], identity), 2, mean))
drugs[[1]]
dg = drugs[[1]]
apply(laply(drugSigs[[geneSet]]$mean[drugs[[dg]]], identity), 2, mean)
dg
drugs
DrugGroups = function(perts=FALSE, old=FALSE){
if(old){
out = list(A='A',C='C')
}else{
if(!perts){
out = list(A='A',CD='CD',XL='XL')
}else{
out = list(A=c("BRD-K94991378","BRD-K25737009", "BRD-A52193669"), CD="BRD-K25737009", XL="BRD-K95901403")
}
}
return(out)
}
meanSigs = lapply(DrugGroups(), function(dg) apply(laply(drugSigs[[geneSet]]$mean[drugs[[dg]]], identity), 2, mean))
load(DataDir('compiled_data/drugData.RData'))
drugs = DrugGroups(perts=TRUE)
dir = DataDir('drug_sigs/tested_compounds/public_L1000_data_CD/')
load(sprintf('%s/drugSigs_%s.RData', dir, params))
meanSigs = list(A = apply(laply(drugSigs[[geneSet]]$mean[drugs$A], identity), 2, mean),
CD = drugSigs[[geneSet]]$mean[drugs$CD], XL=drugSigs[[geneSet]]$mean[drugs$XL])
meanSigs
meanSigs$A
meanSigs$CD
meanSigs$XL
names(meanSigs)
# Compute median FDR for each drug group
medFDR = list()
medFDR$A = apply(laply(drugs$A, function(pert) drugSigs[[geneSet]]$RP[[pert]]$pfp$two.sided), 2, median)
medFDR$CD = drugSigs[[geneSet]]$RP[[drugs$CD]]$pfp$two.sided
medFDR$XL = drugSigs[[geneSet]]$RP[[drugs$XL]]$pfp$two.sided
rpGenes = rownames(drugSigs[[geneSet]]$RP[[3]]$pfp)
names(medFDR$A) = rpGenes
names(medFDR$CD) = rpGenes
names(medFDR$XL) = rpGenes
medFDR
cbind(laply(medFDR, identity))
laply(medFDR, identity)
cbind(medFDR$A, medFDR$CD, medFDR$XL)
F = cbind(medFDR$A, medFDR$CD, medFDR$XL)
names(F)
F = data.frame(A=medFDR$A, CD=medFDR$CD, XL=medFDR$XL)
F[order(F$CD),]
MapDrugNameToPert('DORSOMORPHIN')
DrugGroups = function(perts=FALSE, old=FALSE){
if(old){
out = list(A='A',C='C')
}else{
if(!perts){
out = list(A='A',D='D',XL='XL')
}else{
out = list(A=c("BRD-K94991378","BRD-K25737009", "BRD-A52193669"), D="BRD-K54233340", XL="BRD-K95901403")
}
}
return(out)
}
source('~/Box Sync/CFDR/cfdr/code/R/src/DataProc.R')
# Get list of candidate compounds
load(DataDir('compiled_data/drugData.RData'))
drugs = DrugGroups(perts=TRUE)
# Load drug signatures and process into three signatures averaging across group A
dir = DataDir('drug_sigs/tested_compounds/public_L1000_data_CD/')
load(sprintf('%s/drugSigs_%s.RData', dir, params))
# Compute mean expression for each drug group
meanSigs = list(A = apply(laply(drugSigs[[geneSet]]$mean[drugs$A], identity), 2, mean),
D = drugSigs[[geneSet]]$mean[drugs$D], X=drugSigs[[geneSet]]$mean[drugs$X])
# Compute median FDR for each drug group
medFDR = list()
medFDR$A = apply(laply(drugs$A, function(pert) drugSigs[[geneSet]]$RP[[pert]]$pfp$two.sided), 2, median)
medFDR$D = drugSigs[[geneSet]]$RP[[drugs$D]]$pfp$two.sided
medFDR$X = drugSigs[[geneSet]]$RP[[drugs$X]]$pfp$two.sided
rpGenes = rownames(drugSigs[[geneSet]]$RP[[3]]$pfp)
names(medFDR$A) = rpGenes
names(medFDR$D) = rpGenes
names(medFDR$X) = rpGenes
F = data.frame(A=medFDR$A, D=medFDR$D, X=medFDR$X)
F[order(F$A),]
F[order(F$X),]
# Define seed genes for network extraction
if(type == 'rank_expr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=meanSigs[[dg]], nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankMean', geneSet, nDEG*2)
}else if(type == 'rank_fdr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=-log10(medFDR[[dg]])*sign(meanSigs[[dg]]), nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankFDR', geneSet, nDEG*2)
}else if(type == 'thresh_fdr'){
seeds = lapply(medFDR, function(fdr) DefineSeedGenes(method='thresh', sig=fdr, thresh=fdrThresh))
file = sprintf('drug_networks_%s_%0.2fFDR', geneSet, fdrThresh)
}
# Define seed genes for network extraction
if(type == 'rank_expr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=meanSigs[[dg]], nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankMean', geneSet, nDEG*2)
}else if(type == 'rank_fdr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=-log10(medFDR[[dg]])*sign(meanSigs[[dg]]), nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankFDR', geneSet, nDEG*2)
}else if(type == 'thresh_fdr'){
seeds = lapply(medFDR, function(fdr) DefineSeedGenes(method='thresh', sig=fdr, thresh=fdrThresh))
file = sprintf('drug_networks_%s_%0.2fFDR', geneSet, fdrThresh)
}
DrugGroups()
meanSigs$A
class(meanSigs$A)
class(meanSigs$D)
class(meanSigs$X)
# Compute mean expression for each drug group
meanSigs = list(A = apply(laply(drugSigs[[geneSet]]$mean[drugs$A], identity), 2, mean),
D = drugSigs[[geneSet]]$mean[[drugs$D]), X=drugSigs[[geneSet]]$mean[[drugs$X]])
meanSigs = list(A = apply(laply(drugSigs[[geneSet]]$mean[drugs$A], identity), 2, mean),
D = drugSigs[[geneSet]]$mean[[drugs$D]], X=drugSigs[[geneSet]]$mean[[drugs$X]])
lapply(meanSigs, class)
meanSigs$A
meanSigs$D
meanSigs$X
# Compute median FDR for each drug group
medFDR = list()
medFDR$A = apply(laply(drugs$A, function(pert) drugSigs[[geneSet]]$RP[[pert]]$pfp$two.sided), 2, median)
medFDR$D = drugSigs[[geneSet]]$RP[[drugs$D]]$pfp$two.sided
medFDR$X = drugSigs[[geneSet]]$RP[[drugs$X]]$pfp$two.sided
rpGenes = rownames(drugSigs[[geneSet]]$RP[[3]]$pfp)
names(medFDR$A) = rpGenes
names(medFDR$D) = rpGenes
names(medFDR$X) = rpGenes
medFDR
# Define seed genes for network extraction
if(type == 'rank_expr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=meanSigs[[dg]], nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankMean', geneSet, nDEG*2)
}else if(type == 'rank_fdr'){
seeds = lapply(DrugGroups(), function(dg) DefineSeedGenes(method='rank', sig=-log10(medFDR[[dg]])*sign(meanSigs[[dg]]), nDEG=nDEG))
file = sprintf('drug_networks_%s_%dgenes_rankFDR', geneSet, nDEG*2)
}else if(type == 'thresh_fdr'){
seeds = lapply(medFDR, function(fdr) DefineSeedGenes(method='thresh', sig=fdr, thresh=fdrThresh))
file = sprintf('drug_networks_%s_%0.2fFDR', geneSet, fdrThresh)
}
seeds
type
nDEG
print(sprintf('max FDR is (A) %0.3f, (D) %0.3f (X) %0.3f',
max(medFDR$A[seeds$A]),
max(medFDR$C[seeds$C]),
max(medFDR$X[seeds$X])))
names(seeds)
print(sprintf('max FDR is (A) %0.3f, (D) %0.3f (X) %0.3f',
max(medFDR$A[seeds$A]),
max(medFDR$D[seeds$D]),
max(medFDR$X[seeds$X])))
out = MakeDrugNetworks(G, seeds=seeds, sigs=meanSigs, print=TRUE)
length(out$nets)
out$nets$lung
length(out$nets$lung)
source('~/Box Sync/CFDR/cfdr/code/R/src/Network.R')
PlotNets(nets=out$nets, netArgs=NetArgs(), fshr=out$fisher, mods=NA, driverThresh=95, file=paste0(file, '.pdf'))
library(qgraph)
getwd()
testAll = FALSE
source('R/init.R')
# Disease signatures
load('/Users/rhodos/Desktop/Research/drug_repurposing/data/cf/human/RP_human.RData')
RP_human = RP.out
load('/Users/rhodos/Desktop/Research/drug_repurposing/data/cf/pig/RP_pig.RData')
RP_pig = RP.out
names(RP_human)
baseDir = DataDir('drug_sigs/tested_compounds/public_L1000_data_CD/for_IPA/')
lapply(names(RP.out), function(nm) WriteDataForIPA(RP.out[[nm]], nm, baseDir))
WriteDataForIPA = function(RP, experimentName, baseDir){
exprTable = MakeExprTable(RP)
exprTable$FDR = sapply(exprTable$padj*100, function(x) min(x, 100))
write.table(exprTable, file=paste0(baseDir, experimentName, '.txt'), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
load('/Users/rhodos/Desktop/Research/drug_repurposing/data/cf/human/RP_human.RData')
lapply(names(RP.out), function(nm) WriteDataForIPA(RP.out[[nm]], paste0('disease_human_', nm), baseDir))
MakeExprTable = function(RP){
genes = rownames(RP$pval)
out = data.frame(ID=genes)
rownames(out) = genes
out$diffExpr = RP$FC[genes,]
out$pval = RP$pval[genes,'two.sided']
out$padj = RP$pfp[genes,'two.sided']
return(out)
}
load('/Users/rhodos/Desktop/Research/drug_repurposing/data/cf/human/RP_human.RData')
lapply(names(RP.out), function(nm) WriteDataForIPA(RP.out[[nm]], paste0('disease_human_', nm), baseDir))
RP.out[[1]]
load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta4/META4.RData')
names(META4)
n=load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta4/META4.RData')
n
names(META)
names(META$rnai)
META$rnai$GeneID[1:20]
anyDuplicated(META$rnai$GeneID)
GetSigNames(META$rnai)
source('~/Box Sync/CFDR/cfdr/code/R/src/PlotMeta.R')
GetSigNames(META$rnai)
M = META$rnai
names(M)
experiment = 'scrVsyvc18'
WriteSigToIPAFromMeta = function(M, expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
stopifnot(all(InInterval(range(out$FDR), interval=c(0,2))))
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
write.table(out, file=paste0(baseDir, expName, '.txt'), quote=FALSE, row.names=FALSE, col.names=FALSE, sep='\t')
}
load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta4/META4.RData')
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
WriteSigToIPAFromMeta(M, expName, baseDir)
}
}
WriteSigToIPAFromMeta = function(M, expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
stopifnot(all(InInterval(range(out$FDR), interval=c(0,2))))
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
write.table(out, file=paste0(baseDir, expName, '.txt'), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
WriteSigToIPAFromMeta = function(M, expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
if(all(InInterval(range(out$FDR), interval=c(0,2)))){
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
}else{
browser()
}
write.table(out, file=paste0(baseDir, expName, '.txt'), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
WriteSigToIPAFromMeta(M, expName, baseDir)
}
}
out$FDR
range(out$FDR)
range(out$FDR, na.rm=TRUE)
WriteSigToIPAFromMeta = function(M, expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
if(all(InInterval(range(out$FDR, na.rm=TRUE), interval=c(0,2)))){
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
}else{
browser()
}
write.table(out, file=paste0(baseDir, expName, '.txt'), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
WriteSigToIPAFromMeta(M, expName, baseDir)
}
}
WriteSigToIPAFromMeta = function(M, expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
if(all(InInterval(range(out$FDR, na.rm=TRUE), interval=c(0,2)))){
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
}else{
browser()
}
tmp = na.omit(out)
print(sprintf('removed %d of %d rows', nrow(out) - nrow(tmp), nrow(out)))
write.table(tmp, file=paste0(baseDir, expName, '.txt'), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
WriteSigToIPAFromMeta(M, expName, baseDir)
}
}
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
print(sprintf('%s %s', sigType, expName))
WriteSigToIPAFromMeta(M, expName, baseDir)
}
}
names(META)
n=load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta3/allSigs.RData')
n
names(allSigs)
allSigs$rnai
names(allSigs$rnai)
load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta4/META4.RData')
META = META[c('pighuman','rnai','cold')]
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
print(sprintf('%s %s', sigType, expName))
WriteSigToIPAFromMeta(M, sprintf('%s_%s', sigType, expName), baseDir)
}
}
load('/Users/rhodos/Desktop/Research/drug_repurposing/results/sigs/meta4/META4.RData')
META = META[c('pighuman','rnai','cold')]
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
print(sprintf('%s %s', sigType, expName))
WriteSigToIPAFromMeta(M, sigType=sigType, expName=expName, baseDir)
}
}
WriteSigToIPAFromMeta = function(M, sigType='', expName, baseDir){
out = data.frame(ID=M$GeneID, log2FC=M[,sprintf('logFC(cases/controls).%s', expName)],
pval=M[,sprintf('pval.two.sided.%s', expName)],
FDR=M[,sprintf('pfp.two.sided.%s',expName)])
if(all(InInterval(range(out$FDR, na.rm=TRUE), interval=c(0,2)))){
out$FDR = sapply(out$FDR*100, function(x) min(x, 100))
}else{
browser()
}
tmp = na.omit(out)
print(sprintf('removed %d of %d rows', nrow(out) - nrow(tmp), nrow(out)))
write.table(tmp, file=sprintf('%s%s_%s.txt', baseDir, sigType, expName), quote=FALSE, row.names=FALSE, col.names=TRUE, sep='\t')
}
META = META[c('pighuman','rnai','cold')]
for(sigType in names(META)){
M = META[[sigType]]
for(expName in GetSigNames(M)){
print(sprintf('%s %s', sigType, expName))
WriteSigToIPAFromMeta(M, sigType=sigType, expName=expName, baseDir)
}
}
getwd()
setwd('/Users/rhodos/Desktop/Research/LINCS/submission/dgc_predict')
testAll = FALSE
source('R/init.R')
sigs = LoadCDSigs()
info = LoadCDInfo()
out = ConstructTensor(sigs=sigs, info=info, pThresh=0.1, specificDose=FALSE, time='all',
print=TRUE, nPerDrug = 3, nPerCell=3, removeDuplicates=TRUE)
