p = GHeatmap(as.factor(bestMethod), rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28)
head(bestMethod)
as.character(colors)
names(colors)
M = bestMethod
M[M == 1] = names(tensors$cv)[1]
head(M)
M[M == 2] = names(tensors$cv)[2]
M[M == 3] = names(tensors$cv)[3]
M[M == 4] = names(tensors$cv)[4]
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28) + scale_fill_manual(values=as.character(colors))
print(p)
tensors$cv$ensemble = 0.5 * (tensors$cv$dnpp + tensors$cv$tensor)
PCT = laply(tensors$cv, function(tensor) ComputePCTPerSig(tensors$meas, tensor, format='list')$R)
dimnames(PCT) = list(method = names(tensors$cv),
drug = dimnames(tensors$meas)[[1]],
cell = dimnames(tensors$meas)[[3]])
M = apply(PCT, c(2,3), function(x){a = which.max(x); return(ifelse(length(a)==0, NA, a))})
PCT[,1,1]
M = apply(PCT, c(2,3), function(x) names(x)[which.max(x)]) #; return(ifelse(length(a)==0, NA, a))})
head(M)
M = apply(PCT, c(2,3), function(x){a = names(x)[which.max(x)]; return(ifelse(length(a)==0, NA, a))})
head(M)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/src/Plot.R')
colors = GetMethodColors(longName=FALSE)
GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=as.character(colors))
colors
as.character(colors)
GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
rownames(PCT)
colors
GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=TRUE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
names(tensors$cv)
tmp = tensors$cv[c('mean','mean2','dnpp','tensor','ensemble')]
names(tmp)
dimnames(tmp$mean)
dimnames(tmp$dnpp)
tensors$cv = lapply(tensors$cv, function(tensor){dimnames(tensor) = dimnames(tensors$meas); return(tensor)})
names(tensors$cv)
tensors$cv = tensors$cv[c('mean','mean2','dnpp','tensor','ensemble')]
PCT = laply(tensors$cv, function(tensor) ComputePCTPerSig(tensors$meas, tensor, format='list')$R)
dimnames(PCT) = list(method = names(tensors$cv),
drug = dimnames(tensors$meas)[[1]],
cell = dimnames(tensors$meas)[[3]])
M = apply(PCT, c(2,3), function(x){a = names(x)[which.max(x)]; return(ifelse(length(a)==0, NA, a))})
colors = GetMethodColors(longName=FALSE)
GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=TRUE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cell lines'),
main='', legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'), xlab = 'cell lines',
main='', legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
print(p)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
print(p)
ggsave(file=PlotDir('best_method_per_drug_cell.pdf'), width=9, height=9)
names(tensors$cv)
library(ggplot2)
library(dplyr)
library(plotrix)
library(R.matlab)
library(tidyr)
#### COMPUTE ROC AND AUC CURVES FOR OVERALL TENSOR #########
colors = GetMethodColors()
methods = names(colors)
percDEG = c(1,10)
out = list()
for(i in 1:length(percDEG)){
print(i)
D = TensorDEG(tensors$meas, normGene=FALSE, method='sig', percDEG=percDEG[i], symmetric=FALSE)$D
labels = as.vector(abs(D))
idx = which(!is.na(labels))
labels = labels[idx]
for(method in methods){
print(method)
tensor = tensors$cv[[method]]
ranked_tensor = RankSigs(abs(tensor))
out[[method]][[i]] = ComputeAUC(as.vector(ranked_tensor[idx]), labels, computeROC=TRUE)
}
}
tiff(PlotDir('ROC_DEGs.tiff'), width=510, height=510)
lwd=5
lty = c(1, 3)
legend_str = c()
par(mar=c(5,6,4,2))
n_roc = 200
roc = list()
for(i in 1:length(percDEG)){
for(method in methods){
roc[[method]] = SubsetRoc(out[[method]][[i]]$roc, n_roc)
}
lt = lty[i]
if(i == 1){
plot(roc[['mean']]$fpr, roc[['mean']]$tpr, xlab='FPR', ylab='TPR', type='l', col=colors$mean,
lwd=lwd, ylim=c(0,1), cex.lab=2.0, cex.axis=1.5, lty=lt)
}else if(i > 1){
lines(roc[['mean']]$fpr, roc[['mean']]$tpr, col=colors$mean, lwd=lwd, type='l', lty=lt)
}
lines(roc[['mean2']]$fpr, roc[['mean2']]$tpr, col=colors$mean2, lwd=lwd, type='l', lty=lt)
lines(roc[['dnpp']]$fpr, roc[['dnpp']]$tpr, col=colors$dnpp, lwd=lwd, type='l', lty=lt)
lines(roc[['tensor']]$fpr, roc[['tensor']]$tpr, col=colors$tensor, lwd=lwd, type='l',lty=lt)
lines(roc[['ensemble']]$fpr, roc[['ensemble']]$tpr, col=colors$ensemble, lwd=lwd, type='l',lty=lt)
legend_str = c(legend_str, sprintf('Ensemble, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['ensemble']][[i]]$auc))
legend_str = c(legend_str, sprintf('Tensor, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['tensor']][[i]]$auc))
legend_str = c(legend_str, sprintf('DNPP, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['dnpp']][[i]]$auc))
legend_str = c(legend_str, sprintf('2D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean2']][[i]]$auc))
legend_str = c(legend_str, sprintf('1D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean']][[i]]$auc))
}
lines(c(0,1), c(0,1), lwd=2, col='black', lty=3)
tiff(PlotDir('ROC_DEGs.tiff'), width=510, height=510)
lwd=5
lty = c(1, 3)
legend_str = c()
par(mar=c(5,6,4,2))
n_roc = 200
roc = list()
for(i in 1:length(percDEG)){
for(method in methods){
roc[[method]] = SubsetROC(out[[method]][[i]]$roc, n_roc)
}
lt = lty[i]
if(i == 1){
plot(roc[['mean']]$fpr, roc[['mean']]$tpr, xlab='FPR', ylab='TPR', type='l', col=colors$mean,
lwd=lwd, ylim=c(0,1), cex.lab=2.0, cex.axis=1.5, lty=lt)
}else if(i > 1){
lines(roc[['mean']]$fpr, roc[['mean']]$tpr, col=colors$mean, lwd=lwd, type='l', lty=lt)
}
lines(roc[['mean2']]$fpr, roc[['mean2']]$tpr, col=colors$mean2, lwd=lwd, type='l', lty=lt)
lines(roc[['dnpp']]$fpr, roc[['dnpp']]$tpr, col=colors$dnpp, lwd=lwd, type='l', lty=lt)
lines(roc[['tensor']]$fpr, roc[['tensor']]$tpr, col=colors$tensor, lwd=lwd, type='l',lty=lt)
lines(roc[['ensemble']]$fpr, roc[['ensemble']]$tpr, col=colors$ensemble, lwd=lwd, type='l',lty=lt)
legend_str = c(legend_str, sprintf('Ensemble, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['ensemble']][[i]]$auc))
legend_str = c(legend_str, sprintf('Tensor, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['tensor']][[i]]$auc))
legend_str = c(legend_str, sprintf('DNPP, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['dnpp']][[i]]$auc))
legend_str = c(legend_str, sprintf('2D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean2']][[i]]$auc))
legend_str = c(legend_str, sprintf('1D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean']][[i]]$auc))
}
lines(c(0,1), c(0,1), lwd=2, col='black', lty=3)
all_colors = unlist(c(rep(c(colors$ensemble, colors$tensor, colors$dnpp, colors$mean2, colors$mean), 2), 'black'))
legend('bottomright', lwd=4, legend=c(legend_str, 'random'),
col=all_colors, lty=c(1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3), cex=1.28)
dev.off()
GetMethodColors()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/src/Plot.R')
GetMethodColors()
names(GetMethodColors())
tmp = tensors$cv[names(GetMethodColors())]
names(tmp)
tensors$cv = tensors$cv[names(GetMethodColors())]
rm(tmp)
### Determine which method has better performance per signature
PCT = laply(tensors$cv, function(tensor) ComputePCTPerSig(tensors$meas, tensor, format='list')$R)
dimnames(PCT) = list(method = names(tensors$cv),
drug = dimnames(tensors$meas)[[1]],
cell = dimnames(tensors$meas)[[3]])
M = apply(PCT, c(2,3), function(x){a = names(x)[which.max(x)]; return(ifelse(length(a)==0, NA, a))})
colors = GetMethodColors(longName=FALSE)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
print(p)
ggsave(file=PlotDir('best_method_per_drug_cell.pdf'), width=9, height=9)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=TRUE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
print(p)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=FALSE, xAxisLabSize=7, labSize=28) +
scale_fill_manual(values=colors)
print(p)
ggsave(file=PlotDir('best_method_per_drug_cell.tiff'), width=9, height=9)
ggsave(file=PlotDir('best_method_per_drug_cell.png'), width=9, height=9)
library(rhdf5)
tsize = 'large'
method = 'dnpp'
tensors = list(meas=LoadTensorMat(DataDir(sprintf('tensors/%s.mat', tsize)))$tensor)
names(dimnames(tensors$meas)) = c('drug','gene','cell')
tensors$comp = h5read(ResultsDir(sprintf('%s/hdf5/%s_final_hdf5.mat', tsize, method)),'T')
dimnames(tensors$comp) = dimnames(tensors$meas)
file = ResultsDir(sprintf('%s/%s_tensor_results.mat', tsize, tsize))
tensors$cv = list(dnpp=h5read(file,'#refs#/d'))
dimnames(tensors$cv$dnpp) = dimnames(tensors$meas)
names(tensors$cv)
tensors$cv = tensors$cv$dnpp
names(tensors$cv)
dimnames(tensors$cv)
tensors$cv[1,978,1]
dimnames(tensors$meas)[[2]]
dimnames(tensors$meas)[[2]] = MapEntrezToSymbol(dimnames(tensors$meas)[[2]], lm=TRUE)
dimnames(tensors$comp)[[2]]
dimnames(tensors$comp)[[2]] = MapEntrezToSymbol(dimnames(tensors$comp)[[2]], lm=TRUE)
dimnames(tensors$cv)[[2]]
dimnames(tensors$cv)[[2]] = MapEntrezToSymbol(dimnames(tensors$cv)[[2]], lm=TRUE)
nCells = 10
tensors$meas = tensors$meas[,,1:nCells]
tensors$comp = tensors$comp[,,1:nCells]
tensors$cv = tensors$cv[,,1:nCells]
idx = which(NumSigs(tensors$meas, 'drug')==0)
tensors$meas = tensors$meas[-idx,,]
tensors$comp = tensors$comp[-idx,,]
tensors$cv = tensors$cv[-idx,,]
L = list()
L$mean$obs  = apply(tensors$meas, c(1,2), mean, na.rm=TRUE)
L$mean$cv  = apply(tensors$cv, c(1,2), mean, na.rm=TRUE)
L$mean$full = apply(tensors$comp, c(1,2), mean)
L$max$obs  = apply(tensors$meas, c(1,2), max, na.rm=TRUE)
L$max$cv  = apply(tensors$cv, c(1,2), max, na.rm=TRUE)
L$max$full = apply(tensors$comp, c(1,2), max)
L$allcell$full = UnfoldTensor(tensors$comp, dim=1)
out = prcomp(L$allcell$full, retx=TRUE, center=TRUE, scale.=FALSE)
cs = cumsum(out$sdev^2/sum(out$sdev^2))
plot(cs)
cs[200]
cs[978]
L$pca200$full = out$x[,1:200] # The first 200 accounts for 64.0% of the variance
L$pca978$full = out$x[,1:978] # The first 978 accounts for 90.7% of the variance
for(cell in dimnames(tensors$meas)[[3]]){
print(cell)
L[[cell]]$obs = tensors$meas[,,cell]
L[[cell]]$cv = tensors$cv[,,cell]
L[[cell]]$full = tensors$comp[,,cell]
}
idxAllCells = which(NumSigs(tensors$meas, 'drug') == nCells)
stopifnot(max(abs(L$max$obs[idxAllCells,] - L$max$full[idxAllCells,])) < 1e-10)
for(nm in names(L)){
if(names(L[[nm]]) == c('obs','cv','full')){
idx1 = which(is.na(L[[nm]]$obs))
idx2 = which(is.na(L[[nm]]$cv))
print(sprintf('%s: %d sigs differ', nm, length(union(setdiff(idx1, idx2), setdiff(idx2, idx1)))/978))
}else{
print(sprintf('%s does not contain all versions of features', nm))
}
}
warnings()
dn = unlist(lapply(L[setdiff(names(L), c('allcell', 'pca200', 'pca978'))], function(x) lapply(x, function(xx) dimnames(xx))), recursive=FALSE)
stopifnot(all(sapply(dn, function(d) identical(d, dn[[1]]))))
cor(L$PC3$obs[1,], L$PC3$cv[1,]) #matched drug
cor(L$PC3$obs[2,], L$PC3$cv[1,]) #un-matched drug
cor(L$VCAP$obs[,2], L$VCAP$cv[,2], use = 'pairwise') #matched gene
cor(L$VCAP$obs[,100], L$VCAP$cv[,3], use = 'pairwise') #un-matched gene
save(L, file=DataDir(sprintf('expr/drug/tensor_features_for_drug_property_prediction_%dcells_knn.RData', nCells)))
load('../results/classification/2017-07-30-03-47-00/results_ROC_counts_params.RData')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/compute_AUCs_on_imputed_signatures.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/compute_AUCs_on_imputed_signatures.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/applications/compute_AUCs_on_imputed_signatures.R')
ROC = list()
counts = list()
subset = 'full'
models = c('regLogistic', 'parRF', 'knn')
for(y in colnames(Y)){
y_perts = rownames(Y)[!is.na(Y[,y])]
for(f in names(L)){
# Among drugs with labels for output y, identify which ones have measured vs. only imputed signatures
Xmeas = na.omit(L[[f]]$obs)
meas = intersect(rownames(Xmeas), y_perts)
imp = setdiff(y_perts, rownames(Xmeas))
# Construct data matrix
X = na.omit(L[[f]][[subset]][y_perts,])
# And get corresponding labels (factor and numeric versions)
lab = factor(Y[rownames(X),y], levels=c(0,1), labels=c('neg','pos'))
lab_v = setNames(Y[rownames(X),y], rownames(X))
# Get label counts
C = list(nPos_meas = length(which(lab_v[meas]==1)), nTot_meas = length(meas),
nPos_imp = length(which(lab_v[imp]==1)), nTot_imp = length(imp),
nPos = length(which(lab_v == 1)), nTot = length(lab_v))
counts[[y]][[f]][[subset]] = C
# Run models
for(model in models){
if(length(unique(lab)) == 2 && C$nPos >= 5 && (C$nTot - C$nPos) >= 5){
print(sprintf('Computing AUC for %s with %s (%s) features and %s model', y, f, subset, model))
out = OUT[[y]][[f]][[subset]][[model]]
rownames(out$pred) = rownames(X)[out$pred$rowIndex]
roc = list(eval_meas = ComputeAUC(est = out$pred[meas,'pos'], lab=lab_v[meas], na.rm=TRUE),
eval_imp=ComputeAUC(est=out$pred[imp,'pos'], lab=lab_v[imp], na.rm=TRUE))
}else{
roc = list(eval_meas=NA, eval_imp=NA)
}
ROC[[y]][[f]][[subset]][[model]] = roc
}
}
}
n=load(ResultsDir('classification/2017-07-30-03-47-00/RC.RData'))
n
ggplot(subset(RC, category=='ATC'), aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='ATC Code')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('ATC_code_imputed_vs_measured.png'), width=12, height=10)
ggplot(subset(RC, category=='Target'), aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='Target')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('Target_imputed_vs_measured.png'), width=12, height=10)
ggplot(subset(RC, category=='ATC'), aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='ATC Code')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('ATC_code_imputed_vs_measured.png'), width=8, height=7)
ggplot(subset(RC, category=='Target'), aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='Target')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('Target_imputed_vs_measured.png'), width=8, height=7)
ggsave(PlotDir('Target_imputed_vs_measured.png'), width=9, height=7)
ggsave(PlotDir('Target_imputed_vs_measured.png'), width=8.5, height=7)
cor(RC$AUC_meas, RC$AUC_imp, use='pairwise')
out = lm(RC, AUC_imp ~ AUC_meas)
?lm
out = lm(AUC_imp ~ AUC_meas, RC)
out
ggplot(subset(RC, category=='ATC' & outcome %in% c('L','C','D')), aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='ATC Code')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
RC$outcome
RC$category
RC$category == 'Target'
RC[RC$category == 'Target',]
RC[RC$category == 'Target','outcome']
unique(RC[RC$category == 'Target','outcome'])
length(unique(RC[RC$category == 'Target','outcome']))
ATC = subset(RC, category=='ATC' & outcome %in% c('L','C','D'))
cor(ATC$AUC_imp, ATC$AUC_meas)
Targets = subset(RC, category == 'Target')
Targets = subset(RC, category == 'Target')
cor(Targets$AUC_imp, Targets$AUC_meas, use='pairwise')
Targets$AUC_imp > Targets$AUC_meas
length(which(Targets$AUC_imp > Targets$AUC_meas)
)
Targets$AUC_imp - Targets$AUC_meas
diff = Targets$AUC_imp - Targets$AUC_meas
t.test(diff)
Targets
Targets[Targets$feature == 'HT29',]
diff
cbind(diff, Targets$feature)
RC$diff = RC$AUC_imp - RC$AUC_meas
ATC = subset(RC, category=='ATC' & outcome %in% c('L','C','D'))
Targets = subset(RC, category == 'Target')
ggplot(Targets, aes(x=feature, y=diff)) + geom_boxplot()
ggplot(ATC, aes(x=feature, y=diff)) + geom_boxplot()
ATC
ATC[ATC$feature == 'PC3',]
ATC[ATC$feature == 'VCAP',]
ATC$diff
t.test(ATC$diff)
median(ATC$diff)
dim(ATC)
ATC$diff
ATC$AUC_imp
ATC$AUC_imp > 0.5
length(which(ATC$AUC_imp > 0.5))
ggsave(PlotDir('ATC_code_imputed_vs_measured.eps'), width=8, height=7)
RC$diff = RC$AUC_imp - RC$AUC_meas
ATC = subset(RC, category=='ATC' & outcome %in% c('L','C','D'))
ggplot(ATC, aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() +
guides(color=guide_legend(title='ATC Code')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('ATC_code_imputed_vs_measured.eps'), width=8, height=7)
ggsave(PlotDir('ATC_code_imputed_vs_measured.svg'), width=8, height=7)
install.packages('svglite')
library(svglite)
ggsave(PlotDir('ATC_code_imputed_vs_measured.svg'), width=8, height=7)
Targets = subset(RC, category == 'Target')
ggplot(Targets, aes(x=AUC_meas, y=AUC_imp, color=outcome, label=feature)) +
geom_abline(slope=1, intercept=0, color='DarkGrey', lty='dashed') + geom_point(size=9, alpha=0.6) +
xlim(c(0,1)) + ylim(c(0,1)) +
geom_text(size=3, color='black', check_overlap=TRUE) + theme_bw() + guides(color=guide_legend(title='Target')) +
xlab('AUC on measured signatures') + ylab('AUC on predicted signatures') +
theme(axis.text=element_text(size=12), axis.title=element_text(size=18),
legend.text=element_text(size=12), legend.title=element_text(size=14))
ggsave(PlotDir('Target_imputed_vs_measured.svg'), width=8.5, height=7)
names(tensors)
names(tensors$cv)
dim(tensors$meas)
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/figures/FIGURE_7A_drug_cell_availability.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/figures/FIGURE_7C_obs_density.R')
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/figures/FIGURE_7C_obs_density.R')
names(tensors)
names(tensors$meas)
dim(tensors$meas)
names(tensors$cv)
?sbg
?svg
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/figures/FIGURE_3B_DEG_ROC.R')
out$method[[1]]
names(out)
names(out$tensor)
class(out$tensor)
length(out$tensor)
length(out$tensor[[1]])
names(out$tensor[[1]])
svg(PlotDir('ROC_DEGs.svg'), width=8, height=7)
lwd=5
lty = c(1, 3)
legend_str = c()
par(mar=c(5,6,4,2))
n_roc = 200
roc = list()
for(i in 1:length(percDEG)){
for(method in methods){
roc[[method]] = SubsetROC(out[[method]][[i]]$roc, n_roc)
}
lt = lty[i]
if(i == 1){
plot(roc[['mean']]$fpr, roc[['mean']]$tpr, xlab='FPR', ylab='TPR', type='l', col=colors$mean,
lwd=lwd, ylim=c(0,1), cex.lab=2.0, cex.axis=1.5, lty=lt)
}else if(i > 1){
lines(roc[['mean']]$fpr, roc[['mean']]$tpr, col=colors$mean, lwd=lwd, type='l', lty=lt)
}
lines(roc[['mean2']]$fpr, roc[['mean2']]$tpr, col=colors$mean2, lwd=lwd, type='l', lty=lt)
lines(roc[['dnpp']]$fpr, roc[['dnpp']]$tpr, col=colors$dnpp, lwd=lwd, type='l', lty=lt)
lines(roc[['tensor']]$fpr, roc[['tensor']]$tpr, col=colors$tensor, lwd=lwd, type='l',lty=lt)
#lines(roc[['ensemble']]$fpr, roc[['ensemble']]$tpr, col=colors$ensemble, lwd=lwd, type='l',lty=lt)
#legend_str = c(legend_str, sprintf('Ensemble, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['ensemble']][[i]]$auc))
legend_str = c(legend_str, sprintf('Tensor, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['tensor']][[i]]$auc))
legend_str = c(legend_str, sprintf('DNPP, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['dnpp']][[i]]$auc))
legend_str = c(legend_str, sprintf('2D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean2']][[i]]$auc))
legend_str = c(legend_str, sprintf('1D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean']][[i]]$auc))
}
lines(c(0,1), c(0,1), lwd=2, col='black', lty=3)
all_colors = unlist(c(rep(c(colors$tensor, colors$dnpp, colors$mean2, colors$mean), 2), 'black'))
legend('bottomright', lwd=4, legend=c(legend_str, 'random'),
col=all_colors, lty=c(1, 1, 1, 1, 3, 3, 3, 3, 3), cex=1.28)
dev.off()
pdf(PlotDir('ROC_DEGs.pdf'), width=8, height=7)
lwd=5
lty = c(1, 3)
legend_str = c()
par(mar=c(5,6,4,2))
n_roc = 200
roc = list()
for(i in 1:length(percDEG)){
for(method in methods){
roc[[method]] = SubsetROC(out[[method]][[i]]$roc, n_roc)
}
lt = lty[i]
if(i == 1){
plot(roc[['mean']]$fpr, roc[['mean']]$tpr, xlab='FPR', ylab='TPR', type='l', col=colors$mean,
lwd=lwd, ylim=c(0,1), cex.lab=2.0, cex.axis=1.5, lty=lt)
}else if(i > 1){
lines(roc[['mean']]$fpr, roc[['mean']]$tpr, col=colors$mean, lwd=lwd, type='l', lty=lt)
}
lines(roc[['mean2']]$fpr, roc[['mean2']]$tpr, col=colors$mean2, lwd=lwd, type='l', lty=lt)
lines(roc[['dnpp']]$fpr, roc[['dnpp']]$tpr, col=colors$dnpp, lwd=lwd, type='l', lty=lt)
lines(roc[['tensor']]$fpr, roc[['tensor']]$tpr, col=colors$tensor, lwd=lwd, type='l',lty=lt)
#lines(roc[['ensemble']]$fpr, roc[['ensemble']]$tpr, col=colors$ensemble, lwd=lwd, type='l',lty=lt)
#legend_str = c(legend_str, sprintf('Ensemble, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['ensemble']][[i]]$auc))
legend_str = c(legend_str, sprintf('Tensor, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['tensor']][[i]]$auc))
legend_str = c(legend_str, sprintf('DNPP, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['dnpp']][[i]]$auc))
legend_str = c(legend_str, sprintf('2D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean2']][[i]]$auc))
legend_str = c(legend_str, sprintf('1D-Mean, %0.0f%% DEG, AUC=%0.2f', percDEG[i], out[['mean']][[i]]$auc))
}
lines(c(0,1), c(0,1), lwd=2, col='black', lty=3)
all_colors = unlist(c(rep(c(colors$tensor, colors$dnpp, colors$mean2, colors$mean), 2), 'black'))
legend('bottomright', lwd=4, legend=c(legend_str, 'random'),
col=all_colors, lty=c(1, 1, 1, 1, 3, 3, 3, 3, 3), cex=1.28)
dev.off()
source('~/Desktop/Research/LINCS/submission/dgc_predict/R/figures/FIGURE_7A_drug_cell_availability.R')
ggsave(file=PlotDir('best_method_per_drug_cell.eps'), width=7, height=7)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=FALSE, xAxisLabSize=6, labSize=28) +
scale_fill_manual(values=colors)
print(p)
ggsave(file=PlotDir('best_method_per_drug_cell.eps'), width=7, height=7)
p = GHeatmap(M, rowLab=FALSE, colLab=TRUE, dims=c('drugs', 'cells'),
ylab = 'cell lines', main='',
legend=FALSE, xAxisLabSize=5.5, labSize=28) +
scale_fill_manual(values=colors)
print(p)
ggsave(file=PlotDir('best_method_per_drug_cell.eps'), width=7, height=7)
