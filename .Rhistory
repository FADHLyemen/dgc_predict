cmd1 = 'curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell '
cmd2 = '-d num_genes=10 -d prior=0.15 -d enum=true '
cmd3 = sprintf('-d genes=%s', paste(genes, collapse=','))
cmd = paste0(cmd1, cmd2, cmd3)
out[[drug]] = fromJSON(system(cmd, intern=TRUE))
}
out
names(drugData$expression) = MapEntrezToSymbol(names(drugData$expression), lm=FALSE)
load(DataDir('compiled_data/drugData.RData'))
names(drugData$expression) = MapEntrezToSymbol(names(drugData$expression), lm=FALSE)
hitData = subset(drugData, metadata$hit_HBE)
K = 20
out = list()
for(drug in hitData$name){
x = hitData$expression[drug,]
genesUp = names(sort(x, decreasing=TRUE)[1:K])
genesDown = names(sort(x, decreasing=FALSE)[1:K])
genes = union(genesUp, genesDown)
cmd1 = 'curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell '
cmd2 = '-d num_genes=10 -d prior=0.15 -d enum=true '
cmd3 = sprintf('-d genes=%s', paste(genes, collapse=','))
cmd = paste0(cmd1, cmd2, cmd3)
out[[drug]] = fromJSON(system(cmd, intern=TRUE))
}
names(out)
out
out[[1]]
out[[2]]
out[[3]]
genes
out[[1]]
out[[1]]$nodes
K = 20
out = list()
for(drug in hitData$name){
print(drug)
x = hitData$expression[drug,]
genesUp = names(sort(x, decreasing=TRUE)[1:K])
genesDown = names(sort(x, decreasing=FALSE)[1:K])
genes = union(genesUp, genesDown)
cmd1 = 'curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell '
cmd2 = '-d num_genes=50 -d prior=0.10 -d enum=true '
cmd3 = sprintf('-d genes=%s', paste(genes, collapse=','))
cmd = paste0(cmd1, cmd2, cmd3)
out[[drug]] = fromJSON(system(cmd, intern=TRUE))
}
install.packages('rvest')
library(rvest)
?html
html("http://www.imdb.com/title/tt1490017/")
vignette('selectorgadget')
install.packages('RSelenium')
library(RSelenium)
checkForServer()
file.path(find.package("RSelenium"), "examples/serverUtils")
?serverUtils
rem = remoteDriver(browserName='chrome')
rem
rem$open()
rem = remoteDriver()
rem$open()
rem$new()
RSelenium::startServer()
?docker
?Docker
remDr <- remoteDriver(browserName = "chrome")
remDr$open()
remDr <- remoteDriver(browserName = "chrome", post=4445)
remDr <- remoteDriver(browserName = "chrome", port=4445)
remDr$open()
vignette("RSelenium-docker", package = "RSelenium")
out
checkForServer()
file.path(find.package("RSelenium"), "examples/serverUtils")
?rsDriver
rsDriver(port=4445, browser=c())
dv = rsDriver(port=4445, browser='chrome')
dv = rsDriver(port=4445L, browser='chrome')
dv$navigate("http://www.weather.gov")
dv$client()
dv
cm = dv$client
cm$navigate('http://giant.princeton.edu/')
cm$findElement("class name", "token-input-input-token-facebook")
out = cm$findElement("class name", "token-input-input-token-facebook")
out
sigs = LoadCDSigs()
info = LoadCDInfo()
pThresh = 0.10
load(DataDir('compiled_data/drugData.RData'))
hitData = subset(drugData, metadata$hit_hbe)
drugData$metadata$hit_HBE
hitData = subset(drugData, metadata$hit_HBE)
dim(hitData)
info = SelectDataForTensor(info, pThresh=pThresh, specificDose=FALSE, time='all',
pertIds=hitData$metadata$pert_id, print=TRUE,
removeDuplicates=TRUE, annot=annot=GetLincsAnnot())
info = SelectDataForTensor(info, pThresh=pThresh, specificDose=FALSE, time='all',
pertIds=hitData$metadata$pert_id, print=TRUE,
removeDuplicates=TRUE, annot=GetLincsAnnot())
dim(info)
names(info)
info = SelectDataForTensor(info, pThresh=pThresh, specificDose=FALSE, time='all',
pertIds=hitData$metadata$pert_id, print=TRUE,
removeDuplicates=FALSE, annot=GetLincsAnnot())
info
names(info)
dim(info)
debugSource('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/src/DefineTensor.R')
pThresh = 0.10
out = ConstructTensor(sigs, info, pThresh=pThresh, specificDose=FALSE, time='all', removeDuplicates = FALSE)
dim(info)
info$pert_dose
cbind(info$pert_id, info_pert_dose)
cbind(info$pert_id, infopert_dose)
cbind(info$pert_id, info$pert_dose)
info = info[order(info$pert_id),]
cbind(info$pert_id, info$pert_dose)
cbind(hitData$name, hitData$metadata$pert_id)
cbind(info$pert_id, info$pert_dose, info$pert_dose_unit)
cbind(hitData$name, hitData$metadata$pert_id)
cbind(info$pert_id, info$pert_dose, info$cell_id, info$pert_time)
cbind(hitData$name, hitData$metadata$pert_id)
cor(hitData$structure)
JaccardIndexMatrix(hitData$structure)
cbind(hitData$name, hitData$metadata$pert_id)
load(DataDir('compiled_data/drugData.RData'))
x = drugData$expression['DORSOMORPHIN',]
X
x
names(drugData)
drugData$name
drugData$name == 'DORSOMORPHIN'
names(drugData)
drugData$outcomes
rownames(drugData$outcomes)
'DORSOMORPHIN' %in% rownames(drugData$outcomes)
'DORSOMORPHIN-BRD6' %in% rownames(drugData$outcomes)
which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
idx = which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
rownames(drugData$outcomes)[idx] = 'DORSOMORPHIN'
which(rownames(drugData$outcomes) == 'DORSOMORPHIN-BRD6')
names(drugData)
drugData$metadata$name
'DORSOMORPHIN' %in% drugData$metadata$name
rownames(drugData$metadata)
'DORSOMORPHIN' %in% rownames(drugData$metadata)
'DORSOMORPHIN-BRD6' %in% rownames(drugData$metadata)
rownames(drugData$metadata)[idx] = 'DORSOMORPHIN'
names(drugData)
rownames(drugData$structure)[idx] = 'DORSOMORPHIN'
rownames(drugData$expression_prl)[idx] = 'DORSOMORPHIN'
rownames(drugData$expression)[idx] = 'DORSOMORPHIN'
idx
rownames(drugData$scores)[idx] = 'DORSOMORPHIN'
rownames(drugData$targets)[idx] = 'DORSOMORPHIN'
save(drugData, file=DataDir('compiled_data/drugData.RData'))
load(DataDir('compiled_data/drugData.RData'))
x = drugData$expression['DORSOMORPHIN',]
x
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=TRUE)
x = drugData$expression['DORSOMORPHIN',]
x
sort(x)
?tail
x = sort(drugData$expression['DORSOMORPHIN',])
x
up = names(head(x, K))
x = sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE)
K = 20
up = names(head(x, K))
up
head(x, K)
K
head(x, 1)
class(x)
x = as.vector(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x = as.vector(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
x
class(x)
x[1:5]
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
K = 20
up = names(head(x, K))
up
down = names(tail(x, K))
down
DEGs = union(up, down)
DEGs
paste(DEGs, collapse=',')
cmd = paste0('curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
out
DEGs
load(DataDir('compiled_data/drugData.RData'))
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=FALSE)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
K = 20
up = names(head(x, K))
down = names(tail(x, K))
DEGs = union(up, down)
cmd = paste0('curl giant-api.princeton.edu/networks -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
out
dim(out)
class(out)
length(out$nodes)
length(out$edges)
length(out$version)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=true ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out2 = fromJSON(system(cmd, intern=TRUE))
identical(out, out2)
out$edges
E = as.data.frame(out$edges)
dim(E)
E = t(as.data.frame(out$edges))
dim(E)
head(E)
rownames(E) = NULL
head(E)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 -d tissue=bronchial_epithelial_cell ',
'-d num_genes=50 -d prior=0.10 -d enum=false ',
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
head(out$edges)
E = t(as.matrix(out$edges))
dim(E)
head(E)
E = as.matrix(out$edges)
dim(E)
E[1]
E = t(as.data.frame(out$edges))
dim(E)
E = t(data.frame(out$edges))
E = t(data.frame(out$edges))
dim(E)
E = as.data.frame(out$edges)
dim(E)
class(out$edges)
A = ldply(out$edges, function(a) c(a$source, a$target, a$weight)
)
dim(A)
E = ldply(out$edges, function(a) c(a$source, a$target, a$weight))
dim(E)
head(E)
E = ldply(out$edges, function(a) list(source=a$source, target=a$target, weight=a$weight))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
head(E)
E = subset(E, weight >= weight_cutoff)
numDEGs = 20 # in each direction
weight_cutoff = 0.5
E = subset(E, weight >= weight_cutoff)
dim(E)
E = subset(E, weight >= weight_cutoff)
dim(E)
weight_cutoff = 0.7
E = subset(E, weight >= weight_cutoff)
dim(E)
union(E$source, E$target)
unique(union(E$source, E$target))
length(unique(union(E$source, E$target)))
nodes = union(E$source, E$target)
nodes
anyDuplicated(nodes)
numDEGs = 20 # in each direction
weightCutoff = 0.7
numGenesToAdd = 50
load(DataDir('compiled_data/drugData.RData'))
colnames(drugData$expression) = MapEntrezToSymbol(colnames(drugData$expression), lm=FALSE)
x = unlist(sort(drugData$expression['DORSOMORPHIN',], decreasing=TRUE))
up = names(head(x, numDEGs))
down = names(tail(x, numDEGs))
DEGs = union(up, down)
cmd = paste0('curl giant-api.princeton.edu/networks/1.0 ',
'-d tissue=bronchial_epithelial_cell ',
sprintf('-d num_genes=%d -d prior=0.10 -d enum=false ', numGenesToAdd),
sprintf('-d genes=%s', paste(DEGs, collapse=',')))
out = fromJSON(system(cmd, intern=TRUE))
E = ldply(out$edges, function(a) c(source=a$source, target=a$target, weight=a$weight))
E = subset(E, weight >= weightCutoff)
nodes = union(E$source, E$target)
print(sprintf('Out of %d input DEGs and %d added genes, %d remain in the network with edges > %0.2f.',
2*numDEGs, numGenesToAdd, length(nodes), weightCutoff))
print(sprintf('Of these %d remaining nodes, %d are from the DEGs, and %d are from the added genes',
length(nodes), length(intersect(nodes, DEGs)), length(setdiff(nodes, DEGs))))
testAll = FALSE
source('R/init.R')
load(DataDir('compiled_data/drugData.RData'))
GetInhibitors(drugData, thresh=0.5)
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
hitsABC
n=load(OutputDir('large_cluster_compare/large_cluster.RData'))
n
large_clutser
large_cluster
hitsABC %ni% large_cluster
hitsABC[hitsABC %ni% large_cluster]
load(OutputDir('large_cluster_compare/large_cluster.RData'))
large_cluster[large_cluster == 'BRD-K54233340'] = 'DORSOMORPHIN'
large_cluster[large_cluster == 'BRD-K95901403'] = 'XL147'
hitsABC[hitsABC %ni% large_cluster]
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/src/Plot.R')
source('~/Dropbox (Dudley Lab)/CFDR/cfdr/code/R/scripts/compare_sigs/compare_Dorsomorphin_vs_related_inhibitors.R')
xsd
xsd['DDIT4']
ysd['DDIT4']
x['DDIT4']
y['DDIT4']
rownames(R)
R$C
R['C',]
sg$C
sg$C$INH
G[sg$C$INH,]
dim(G[sg$C$INH,])
sg$C$HIT
y = G["C---DORSOMORPHIN",]
dim(y)
Norm2(y)
Norm2(x)
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = G["C---DORSOMORPHIN",]
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
dim(x)
length(x)
length(y)
dim(y)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
dim(y)
length(y)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=3,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('correlation = %0.2f', cor(x,y)))
# Just compare Dorsomorphin to all 8 inhibitors
x = apply(G[sg$C$INH,], 2, mean)
x = x / Norm2(x)
y = apply(G["C---DORSOMORPHIN",], 2, mean)
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
resid = lm(y ~ x)$residuals
resid
M = as.matrix(resid)
dim(M)
M = as.matrix(t(resid))
rownames(M)
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=c('resid', names(resid)))
resid = lm(y ~ x)$residuals
M = array(data=resid, dim=c(1, 978), dimnames=list('resid', names(resid)))
GMT = SubsetGMTByNThresh(GetGMT(), nThreshold=10)
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dorsomorphin_v_inhibitors')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
peaa = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
paea = RunPAEAOnMatrix(M, GMT=GMT, print=TRUE, nCores=1, plot=TRUE, prefix='paea_resid_dors_v_inh/')
length(paea)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res = MergePAEAResults(paea[[1]], adjPThresh=0.05)
res
res = MergePAEAResults(paea[[1]], adjPThresh=0.01)
dim(res)
res
res[order(res$adjp),]
lmGenes = GetLmGenes(type = 'symbol')
lmGenes
'CLOCK' %in% lmGenes
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=8,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
pdf(PlotDir('scatter_dorsomorphin_v_inh.pdf'))
FancyScatter(x, y, xlim=range(x), ylim=range(y), labels=labels, labelSize=6,
xlab='Mean expression of inhibitors', ylab='Expression of Dorsomorphin', alpha=0.5, diag=TRUE,
color=1, dodge=1, print=TRUE, #filename=sprintf('scatter/%s_%s.pdf', group, subgroup),
#main=sprintf('%s (%d) vs. %s (%d), cor=%0.2f', group, length(g$HIT), subgroup, length(g[[subgroup]]), cor(x,y)))
main = sprintf('Pearson correlation = %0.2f', cor(x,y)))
dev.off()
Write2XLS('res', file=OutputDir('dorsomorphin/double_diff_enrichments.xlsx'))
setwd('/Users/rhodos/Desktop/Dropbox/LINCS/submission/dgc_predict')
testAll = FALSE
source('R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/DEMO_CV.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_CallMatlab.R')
TestMatlab()
tensors$meas
tensors$cv
tensors$pred
close(matlab)
rm(matlab)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/DEMO_CV.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_GSEA.R')
files = c('Utils', 'DataProc', 'DefineTensor', 'EvaluateTensor', 'CallMatlab', 'GSEA')
functions = unlist(lapply(files), function(file) GetFunctionNames(sprintf('R/src/%s.R')))
functions = unlist(lapply(files), function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))
files = c('Utils', 'DataProc', 'DefineTensor', 'EvaluateTensor', 'CallMatlab', 'GSEA')
functions = unlist(lapply(files), function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))
functionNames = unlist(lapply(files), function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))
files
functionNames = unlist(sapply(files), function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))
functionNames = unlist(sapply(files), function(x) GetFunctionNames(sprintf('R/src/%s.R', x)))
files = c('Utils', 'DataProc', 'DefineTensor', 'EvaluateTensor', 'CallMatlab', 'GSEA')
functionNames = unlist(sapply(files, function(file) GetFunctionNames(sprintf('R/src/%s.R', file))))
function.names = c(GetFunctionNames('R/src/Utils.R'),
GetFunctionNames('R/src/DataProc.R'),
GetFunctionNames('R/src/DefineTensor.R'),
GetFunctionNames('R/src/CallMatlab.R'),
GetFunctionNames('R/src/GSEA.R'),
GetFunctionNames('R/src/EvaluateTensor.R'))
identical(functionNames, function.names)
files = c('Utils', 'DataProc', 'DefineTensor', 'EvaluateTensor', 'CallMatlab', 'GSEA')
functionNames = unlist(sapply(files, function(file) GetFunctionNames(sprintf('R/src/%s.R', file))))
function.names = c(GetFunctionNames('R/src/Utils.R'),
GetFunctionNames('R/src/DataProc.R'),
GetFunctionNames('R/src/DefineTensor.R'),
GetFunctionNames('R/src/EvaluateTensor.R'),
GetFunctionNames('R/src/CallMatlab.R'),
GetFunctionNames('R/src/GSEA.R'))
identical(functionNames, function.names)
functionNames
functionNames = as.character(unlist(sapply(files, function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))))
functionNames
identical(functionNames, function.names)
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
setwd('/Users/rhodos/Desktop/Dropbox/LINCS/submission/dgc_predict')
source('R/init.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_EvaluateTensor.R')
source('R/init.R')
getwd()
LsVars()
getwd()
rm(list=ls())
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
debugSource('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_Utils.R')
TestLsVars()
i
LsVars()
files = c('Utils', 'DataProc', 'DefineTensor', 'EvaluateTensor', 'CallMatlab', 'GSEA')
functionNames = as.character(unlist(sapply(files, function(file) GetFunctionNames(sprintf('R/src/%s.R', file)))))
functionNames
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
LsVars()
ls()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_Utils.R')
testAll = FALSE
source('R/init.R')
TestLsVars()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/src/Utils.R')
ls()
LsVars()
i=5
LsVars()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_all.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/test/test_CallMatlab.R')
testAll = TRUE
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/init.R')
warnings()
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/example_complete_tensor_and_cv.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/example_complete_tensor_and_cv.R')
source('~/Dropbox (Dudley Lab)/LINCS/submission/dgc_predict/R/scripts/example_complete_tensor_and_cv.R')
close(matlab)
rm(matlab)
